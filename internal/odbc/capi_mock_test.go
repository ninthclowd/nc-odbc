// Code generated by MockGen. DO NOT EDIT.
// Source: capi.go

// Package odbc is a generated GoMock package.
package odbc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/ninthclowd/unixodbc/internal/api"
)

// MockAPI is a mock of odbcAPI interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// SQLAllocHandle mocks base method.
func (m *MockAPI) SQLAllocHandle(handleType api.SQLSMALLINT, inputHandle api.SQLHANDLE, outputHandle *api.SQLHANDLE) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLAllocHandle", handleType, inputHandle, outputHandle)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLAllocHandle indicates an expected call of SQLAllocHandle.
func (mr *MockAPIMockRecorder) SQLAllocHandle(handleType, inputHandle, outputHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLAllocHandle", reflect.TypeOf((*MockAPI)(nil).SQLAllocHandle), handleType, inputHandle, outputHandle)
}

// SQLBindParameter mocks base method.
func (m *MockAPI) SQLBindParameter(statementHandle api.SQLHSTMT, parameterNumber api.SQLUSMALLINT, inputOutputType, valueType, parameterType api.SQLSMALLINT, columnSize api.SQLULEN, decimalDigits api.SQLSMALLINT, parameterValuePtr api.SQLPOINTER, bufferLength api.SQLLEN, strLenOrIndPtr *api.SQLLEN) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLBindParameter", statementHandle, parameterNumber, inputOutputType, valueType, parameterType, columnSize, decimalDigits, parameterValuePtr, bufferLength, strLenOrIndPtr)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLBindParameter indicates an expected call of SQLBindParameter.
func (mr *MockAPIMockRecorder) SQLBindParameter(statementHandle, parameterNumber, inputOutputType, valueType, parameterType, columnSize, decimalDigits, parameterValuePtr, bufferLength, strLenOrIndPtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLBindParameter", reflect.TypeOf((*MockAPI)(nil).SQLBindParameter), statementHandle, parameterNumber, inputOutputType, valueType, parameterType, columnSize, decimalDigits, parameterValuePtr, bufferLength, strLenOrIndPtr)
}

// SQLCancelHandle mocks base method.
func (m *MockAPI) SQLCancelHandle(handleType api.SQLSMALLINT, inputHandle api.SQLHANDLE) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLCancelHandle", handleType, inputHandle)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLCancelHandle indicates an expected call of SQLCancelHandle.
func (mr *MockAPIMockRecorder) SQLCancelHandle(handleType, inputHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLCancelHandle", reflect.TypeOf((*MockAPI)(nil).SQLCancelHandle), handleType, inputHandle)
}

// SQLCloseCursor mocks base method.
func (m *MockAPI) SQLCloseCursor(statementHandle api.SQLHSTMT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLCloseCursor", statementHandle)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLCloseCursor indicates an expected call of SQLCloseCursor.
func (mr *MockAPIMockRecorder) SQLCloseCursor(statementHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLCloseCursor", reflect.TypeOf((*MockAPI)(nil).SQLCloseCursor), statementHandle)
}

// SQLDescribeCol mocks base method.
func (m *MockAPI) SQLDescribeCol(statementHandle api.SQLHSTMT, columnNumber api.SQLUSMALLINT, columnName *[]uint16, bufferLength api.SQLSMALLINT, nameLengthPtr, dataTypePtr *api.SQLSMALLINT, columnSizePtr *api.SQLULEN, decimalDigitsPtr, nullablePtr *api.SQLSMALLINT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLDescribeCol", statementHandle, columnNumber, columnName, bufferLength, nameLengthPtr, dataTypePtr, columnSizePtr, decimalDigitsPtr, nullablePtr)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLDescribeCol indicates an expected call of SQLDescribeCol.
func (mr *MockAPIMockRecorder) SQLDescribeCol(statementHandle, columnNumber, columnName, bufferLength, nameLengthPtr, dataTypePtr, columnSizePtr, decimalDigitsPtr, nullablePtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLDescribeCol", reflect.TypeOf((*MockAPI)(nil).SQLDescribeCol), statementHandle, columnNumber, columnName, bufferLength, nameLengthPtr, dataTypePtr, columnSizePtr, decimalDigitsPtr, nullablePtr)
}

// SQLDisconnect mocks base method.
func (m *MockAPI) SQLDisconnect(connectionHandle api.SQLHDBC) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLDisconnect", connectionHandle)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLDisconnect indicates an expected call of SQLDisconnect.
func (mr *MockAPIMockRecorder) SQLDisconnect(connectionHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLDisconnect", reflect.TypeOf((*MockAPI)(nil).SQLDisconnect), connectionHandle)
}

// SQLDriverConnectW mocks base method.
func (m *MockAPI) SQLDriverConnectW(connectionHandle api.SQLHDBC, windowHandle api.SQLHWND, inConnectionString []uint16, stringLength1 api.SQLSMALLINT, outConnectionString *[]uint16, bufferLength api.SQLSMALLINT, stringLength2Ptr *api.SQLSMALLINT, driverCompletion api.SQLUSMALLINT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLDriverConnectW", connectionHandle, windowHandle, inConnectionString, stringLength1, outConnectionString, bufferLength, stringLength2Ptr, driverCompletion)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLDriverConnectW indicates an expected call of SQLDriverConnectW.
func (mr *MockAPIMockRecorder) SQLDriverConnectW(connectionHandle, windowHandle, inConnectionString, stringLength1, outConnectionString, bufferLength, stringLength2Ptr, driverCompletion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLDriverConnectW", reflect.TypeOf((*MockAPI)(nil).SQLDriverConnectW), connectionHandle, windowHandle, inConnectionString, stringLength1, outConnectionString, bufferLength, stringLength2Ptr, driverCompletion)
}

// SQLEndTran mocks base method.
func (m *MockAPI) SQLEndTran(handleType api.SQLSMALLINT, handle api.SQLHANDLE, completionType api.SQLSMALLINT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLEndTran", handleType, handle, completionType)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLEndTran indicates an expected call of SQLEndTran.
func (mr *MockAPIMockRecorder) SQLEndTran(handleType, handle, completionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLEndTran", reflect.TypeOf((*MockAPI)(nil).SQLEndTran), handleType, handle, completionType)
}

// SQLExecDirect mocks base method.
func (m *MockAPI) SQLExecDirect(statementHandle api.SQLHSTMT, statementText []uint16, textLength api.SQLINTEGER) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLExecDirect", statementHandle, statementText, textLength)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLExecDirect indicates an expected call of SQLExecDirect.
func (mr *MockAPIMockRecorder) SQLExecDirect(statementHandle, statementText, textLength interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLExecDirect", reflect.TypeOf((*MockAPI)(nil).SQLExecDirect), statementHandle, statementText, textLength)
}

// SQLExecute mocks base method.
func (m *MockAPI) SQLExecute(statementHandle api.SQLHSTMT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLExecute", statementHandle)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLExecute indicates an expected call of SQLExecute.
func (mr *MockAPIMockRecorder) SQLExecute(statementHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLExecute", reflect.TypeOf((*MockAPI)(nil).SQLExecute), statementHandle)
}

// SQLFetch mocks base method.
func (m *MockAPI) SQLFetch(statementHandle api.SQLHSTMT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLFetch", statementHandle)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLFetch indicates an expected call of SQLFetch.
func (mr *MockAPIMockRecorder) SQLFetch(statementHandle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLFetch", reflect.TypeOf((*MockAPI)(nil).SQLFetch), statementHandle)
}

// SQLFreeHandle mocks base method.
func (m *MockAPI) SQLFreeHandle(handleType api.SQLSMALLINT, handle api.SQLHANDLE) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLFreeHandle", handleType, handle)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLFreeHandle indicates an expected call of SQLFreeHandle.
func (mr *MockAPIMockRecorder) SQLFreeHandle(handleType, handle interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLFreeHandle", reflect.TypeOf((*MockAPI)(nil).SQLFreeHandle), handleType, handle)
}

// SQLFreeStmt mocks base method.
func (m *MockAPI) SQLFreeStmt(statementHandle api.SQLHSTMT, option api.SQLUSMALLINT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLFreeStmt", statementHandle, option)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLFreeStmt indicates an expected call of SQLFreeStmt.
func (mr *MockAPIMockRecorder) SQLFreeStmt(statementHandle, option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLFreeStmt", reflect.TypeOf((*MockAPI)(nil).SQLFreeStmt), statementHandle, option)
}

// SQLGetConnectAttr mocks base method.
func (m *MockAPI) SQLGetConnectAttr(connectionHandle api.SQLHDBC, attribute api.SQLINTEGER, valuePtr api.SQLPOINTER, bufferLength api.SQLINTEGER, stringLengthPtr *api.SQLINTEGER) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLGetConnectAttr", connectionHandle, attribute, valuePtr, bufferLength, stringLengthPtr)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLGetConnectAttr indicates an expected call of SQLGetConnectAttr.
func (mr *MockAPIMockRecorder) SQLGetConnectAttr(connectionHandle, attribute, valuePtr, bufferLength, stringLengthPtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLGetConnectAttr", reflect.TypeOf((*MockAPI)(nil).SQLGetConnectAttr), connectionHandle, attribute, valuePtr, bufferLength, stringLengthPtr)
}

// SQLGetData mocks base method.
func (m *MockAPI) SQLGetData(statementHandle api.SQLHSTMT, colOrParamNum api.SQLUSMALLINT, targetType api.SQLSMALLINT, targetValuePtr api.SQLPOINTER, bufferLength api.SQLLEN, strLenOrIndPtr *api.SQLLEN) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLGetData", statementHandle, colOrParamNum, targetType, targetValuePtr, bufferLength, strLenOrIndPtr)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLGetData indicates an expected call of SQLGetData.
func (mr *MockAPIMockRecorder) SQLGetData(statementHandle, colOrParamNum, targetType, targetValuePtr, bufferLength, strLenOrIndPtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLGetData", reflect.TypeOf((*MockAPI)(nil).SQLGetData), statementHandle, colOrParamNum, targetType, targetValuePtr, bufferLength, strLenOrIndPtr)
}

// SQLGetDiagRecW mocks base method.
func (m *MockAPI) SQLGetDiagRecW(handleType api.SQLSMALLINT, handle api.SQLHANDLE, recNumber api.SQLSMALLINT, sqlState *[]uint16, nativeErrorPtr *api.SQLINTEGER, messageText *[]uint16, bufferLength api.SQLSMALLINT, textLengthPtr *api.SQLSMALLINT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLGetDiagRecW", handleType, handle, recNumber, sqlState, nativeErrorPtr, messageText, bufferLength, textLengthPtr)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLGetDiagRecW indicates an expected call of SQLGetDiagRecW.
func (mr *MockAPIMockRecorder) SQLGetDiagRecW(handleType, handle, recNumber, sqlState, nativeErrorPtr, messageText, bufferLength, textLengthPtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLGetDiagRecW", reflect.TypeOf((*MockAPI)(nil).SQLGetDiagRecW), handleType, handle, recNumber, sqlState, nativeErrorPtr, messageText, bufferLength, textLengthPtr)
}

// SQLGetInfo mocks base method.
func (m *MockAPI) SQLGetInfo(connectionHandle api.SQLHDBC, infoType api.SQLUSMALLINT, infoValuePtr api.SQLPOINTER, bufferLength api.SQLSMALLINT, stringLengthPtr *api.SQLSMALLINT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLGetInfo", connectionHandle, infoType, infoValuePtr, bufferLength, stringLengthPtr)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLGetInfo indicates an expected call of SQLGetInfo.
func (mr *MockAPIMockRecorder) SQLGetInfo(connectionHandle, infoType, infoValuePtr, bufferLength, stringLengthPtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLGetInfo", reflect.TypeOf((*MockAPI)(nil).SQLGetInfo), connectionHandle, infoType, infoValuePtr, bufferLength, stringLengthPtr)
}

// SQLGetTypeInfo mocks base method.
func (m *MockAPI) SQLGetTypeInfo(statementHandle api.SQLHSTMT, dataType api.SQLSMALLINT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLGetTypeInfo", statementHandle, dataType)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLGetTypeInfo indicates an expected call of SQLGetTypeInfo.
func (mr *MockAPIMockRecorder) SQLGetTypeInfo(statementHandle, dataType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLGetTypeInfo", reflect.TypeOf((*MockAPI)(nil).SQLGetTypeInfo), statementHandle, dataType)
}

// SQLNumParams mocks base method.
func (m *MockAPI) SQLNumParams(statementHandle api.SQLHSTMT, parameterCountPtr *api.SQLSMALLINT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLNumParams", statementHandle, parameterCountPtr)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLNumParams indicates an expected call of SQLNumParams.
func (mr *MockAPIMockRecorder) SQLNumParams(statementHandle, parameterCountPtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLNumParams", reflect.TypeOf((*MockAPI)(nil).SQLNumParams), statementHandle, parameterCountPtr)
}

// SQLNumResultCols mocks base method.
func (m *MockAPI) SQLNumResultCols(statementHandle api.SQLHSTMT, columnCountPtr *api.SQLSMALLINT) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLNumResultCols", statementHandle, columnCountPtr)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLNumResultCols indicates an expected call of SQLNumResultCols.
func (mr *MockAPIMockRecorder) SQLNumResultCols(statementHandle, columnCountPtr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLNumResultCols", reflect.TypeOf((*MockAPI)(nil).SQLNumResultCols), statementHandle, columnCountPtr)
}

// SQLPrepare mocks base method.
func (m *MockAPI) SQLPrepare(statementHandle api.SQLHSTMT, statementText []uint16, textLength api.SQLINTEGER) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLPrepare", statementHandle, statementText, textLength)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLPrepare indicates an expected call of SQLPrepare.
func (mr *MockAPIMockRecorder) SQLPrepare(statementHandle, statementText, textLength interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLPrepare", reflect.TypeOf((*MockAPI)(nil).SQLPrepare), statementHandle, statementText, textLength)
}

// SQLSetConnectAttrConst mocks base method.
func (m *MockAPI) SQLSetConnectAttrConst(connectionHandle api.SQLHDBC, attribute api.SQLINTEGER, value uint64) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLSetConnectAttrConst", connectionHandle, attribute, value)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLSetConnectAttrConst indicates an expected call of SQLSetConnectAttrConst.
func (mr *MockAPIMockRecorder) SQLSetConnectAttrConst(connectionHandle, attribute, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLSetConnectAttrConst", reflect.TypeOf((*MockAPI)(nil).SQLSetConnectAttrConst), connectionHandle, attribute, value)
}

// SQLSetEnvAttrConst mocks base method.
func (m *MockAPI) SQLSetEnvAttrConst(environmentHandle api.SQLHENV, attribute api.SQLINTEGER, value uint64) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLSetEnvAttrConst", environmentHandle, attribute, value)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLSetEnvAttrConst indicates an expected call of SQLSetEnvAttrConst.
func (mr *MockAPIMockRecorder) SQLSetEnvAttrConst(environmentHandle, attribute, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLSetEnvAttrConst", reflect.TypeOf((*MockAPI)(nil).SQLSetEnvAttrConst), environmentHandle, attribute, value)
}

// SQLSetEnvAttrStr mocks base method.
func (m *MockAPI) SQLSetEnvAttrStr(environmentHandle api.SQLHENV, attribute api.SQLINTEGER, value api.SQLPOINTER, stringLength api.SQLINTEGER) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLSetEnvAttrStr", environmentHandle, attribute, value, stringLength)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLSetEnvAttrStr indicates an expected call of SQLSetEnvAttrStr.
func (mr *MockAPIMockRecorder) SQLSetEnvAttrStr(environmentHandle, attribute, value, stringLength interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLSetEnvAttrStr", reflect.TypeOf((*MockAPI)(nil).SQLSetEnvAttrStr), environmentHandle, attribute, value, stringLength)
}

// SQLSetStmtAttrConst mocks base method.
func (m *MockAPI) SQLSetStmtAttrConst(stmtHandle api.SQLHSTMT, attribute api.SQLINTEGER, value uint64) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLSetStmtAttrConst", stmtHandle, attribute, value)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLSetStmtAttrConst indicates an expected call of SQLSetStmtAttrConst.
func (mr *MockAPIMockRecorder) SQLSetStmtAttrConst(stmtHandle, attribute, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLSetStmtAttrConst", reflect.TypeOf((*MockAPI)(nil).SQLSetStmtAttrConst), stmtHandle, attribute, value)
}

// SQLSetStmtAttrPointer mocks base method.
func (m *MockAPI) SQLSetStmtAttrPointer(stmtHandle api.SQLHSTMT, attribute api.SQLINTEGER, pointer api.SQLPOINTER) api.SQLRETURN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLSetStmtAttrPointer", stmtHandle, attribute, pointer)
	ret0, _ := ret[0].(api.SQLRETURN)
	return ret0
}

// SQLSetStmtAttrPointer indicates an expected call of SQLSetStmtAttrPointer.
func (mr *MockAPIMockRecorder) SQLSetStmtAttrPointer(stmtHandle, attribute, pointer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLSetStmtAttrPointer", reflect.TypeOf((*MockAPI)(nil).SQLSetStmtAttrPointer), stmtHandle, attribute, pointer)
}
