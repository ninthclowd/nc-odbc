// Code generated by MockGen. DO NOT EDIT.
// Source: handle.go

// Package odbc is a generated GoMock package.
package odbc

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/ninthclowd/unixodbc/internal/api"
)

// MockHandle is a mock of handle interface.
type MockHandle struct {
	ctrl     *gomock.Controller
	recorder *MockHandleMockRecorder
}

// MockHandleMockRecorder is the mock recorder for MockHandle.
type MockHandleMockRecorder struct {
	mock *MockHandle
}

// NewMockHandle creates a new mock instance.
func NewMockHandle(ctrl *gomock.Controller) *MockHandle {
	mock := &MockHandle{ctrl: ctrl}
	mock.recorder = &MockHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandle) EXPECT() *MockHandleMockRecorder {
	return m.recorder
}

// api mocks base method.
func (m *MockHandle) api() odbcAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "api")
	ret0, _ := ret[0].(odbcAPI)
	return ret0
}

// api indicates an expected call of api.
func (mr *MockHandleMockRecorder) api() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "api", reflect.TypeOf((*MockHandle)(nil).api))
}

// cancel mocks base method.
func (m *MockHandle) cancel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "cancel")
	ret0, _ := ret[0].(error)
	return ret0
}

// cancel indicates an expected call of cancel.
func (mr *MockHandleMockRecorder) cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "cancel", reflect.TypeOf((*MockHandle)(nil).cancel))
}

// child mocks base method.
func (m *MockHandle) child(handleType api.SQLSMALLINT) (handle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "child", handleType)
	ret0, _ := ret[0].(handle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// child indicates an expected call of child.
func (mr *MockHandleMockRecorder) child(handleType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "child", reflect.TypeOf((*MockHandle)(nil).child), handleType)
}

// free mocks base method.
func (m *MockHandle) free() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "free")
	ret0, _ := ret[0].(error)
	return ret0
}

// free indicates an expected call of free.
func (mr *MockHandleMockRecorder) free() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "free", reflect.TypeOf((*MockHandle)(nil).free))
}

// hnd mocks base method.
func (m *MockHandle) hnd() api.SQLHANDLE {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hnd")
	ret0, _ := ret[0].(api.SQLHANDLE)
	return ret0
}

// hnd indicates an expected call of hnd.
func (mr *MockHandleMockRecorder) hnd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hnd", reflect.TypeOf((*MockHandle)(nil).hnd))
}

// hndType mocks base method.
func (m *MockHandle) hndType() api.SQLSMALLINT {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hndType")
	ret0, _ := ret[0].(api.SQLSMALLINT)
	return ret0
}

// hndType indicates an expected call of hndType.
func (mr *MockHandleMockRecorder) hndType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hndType", reflect.TypeOf((*MockHandle)(nil).hndType))
}

// result mocks base method.
func (m *MockHandle) result(r api.SQLRETURN) (api.SQLRETURN, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "result", r)
	ret0, _ := ret[0].(api.SQLRETURN)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// result indicates an expected call of result.
func (mr *MockHandleMockRecorder) result(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "result", reflect.TypeOf((*MockHandle)(nil).result), r)
}
