// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Wed, 22 May 2024 15:11:09 MDT.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package api

/*
#cgo linux LDFLAGS: -lodbc
#include "sql.h"
#include "sqlext.h"
#include "stdint.h"
#include "sqlucode.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// SQLAllocConnect function as declared in include/sql.h:577
func SQLAllocConnect(environmentHandle *SQLHENV, connectionHandle []*SQLHDBC) SQLRETURN {
	cenvironmentHandle, cenvironmentHandleAllocMap := (C.SQLHENV)(unsafe.Pointer(environmentHandle)), cgoAllocsUnknown
	cconnectionHandle, cconnectionHandleAllocMap := copyPSQLHDBCBytes((*sliceHeader)(unsafe.Pointer(&connectionHandle)))
	__ret := C.SQLAllocConnect(cenvironmentHandle, cconnectionHandle)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	runtime.KeepAlive(cenvironmentHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLAllocEnv function as declared in include/sql.h:580
func SQLAllocEnv(environmentHandle []*SQLHENV) SQLRETURN {
	cenvironmentHandle, cenvironmentHandleAllocMap := copyPSQLHENVBytes((*sliceHeader)(unsafe.Pointer(&environmentHandle)))
	__ret := C.SQLAllocEnv(cenvironmentHandle)
	runtime.KeepAlive(cenvironmentHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLAllocHandle function as declared in include/sql.h:583
func SQLAllocHandle(handleType SQLSMALLINT, inputHandle *SQLHANDLE, outputHandle **SQLHANDLE) SQLRETURN {
	chandleType, chandleTypeAllocMap := (C.SQLSMALLINT)(handleType), cgoAllocsUnknown
	cinputHandle, cinputHandleAllocMap := (C.SQLHANDLE)(unsafe.Pointer(inputHandle)), cgoAllocsUnknown
	coutputHandle, coutputHandleAllocMap := (*C.SQLHANDLE)(unsafe.Pointer(outputHandle)), cgoAllocsUnknown
	__ret := C.SQLAllocHandle(chandleType, cinputHandle, coutputHandle)
	runtime.KeepAlive(coutputHandleAllocMap)
	runtime.KeepAlive(cinputHandleAllocMap)
	runtime.KeepAlive(chandleTypeAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLAllocStmt function as declared in include/sql.h:587
func SQLAllocStmt(connectionHandle *SQLHDBC, statementHandle []*SQLHSTMT) SQLRETURN {
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	cstatementHandle, cstatementHandleAllocMap := copyPSQLHSTMTBytes((*sliceHeader)(unsafe.Pointer(&statementHandle)))
	__ret := C.SQLAllocStmt(cconnectionHandle, cstatementHandle)
	runtime.KeepAlive(cstatementHandleAllocMap)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLBindCol function as declared in include/sql.h:590
func SQLBindCol(statementHandle *SQLHSTMT, columnNumber SQLUSMALLINT, targetType SQLSMALLINT, targetValue *SQLPOINTER, bufferLength SQLLEN, strLen_or_Ind []SQLLEN) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	ccolumnNumber, ccolumnNumberAllocMap := (C.SQLUSMALLINT)(columnNumber), cgoAllocsUnknown
	ctargetType, ctargetTypeAllocMap := (C.SQLSMALLINT)(targetType), cgoAllocsUnknown
	ctargetValue, ctargetValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(targetValue)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLLEN)(bufferLength), cgoAllocsUnknown
	cstrLen_or_Ind, cstrLen_or_IndAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&strLen_or_Ind)))
	__ret := C.SQLBindCol(cstatementHandle, ccolumnNumber, ctargetType, ctargetValue, cbufferLength, cstrLen_or_Ind)
	runtime.KeepAlive(cstrLen_or_IndAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(ctargetValueAllocMap)
	runtime.KeepAlive(ctargetTypeAllocMap)
	runtime.KeepAlive(ccolumnNumberAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLBindParam function as declared in include/sql.h:596
func SQLBindParam(statementHandle *SQLHSTMT, parameterNumber SQLUSMALLINT, valueType SQLSMALLINT, parameterType SQLSMALLINT, lengthPrecision SQLULEN, parameterScale SQLSMALLINT, parameterValue *SQLPOINTER, strLen_or_Ind []SQLLEN) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cparameterNumber, cparameterNumberAllocMap := (C.SQLUSMALLINT)(parameterNumber), cgoAllocsUnknown
	cvalueType, cvalueTypeAllocMap := (C.SQLSMALLINT)(valueType), cgoAllocsUnknown
	cparameterType, cparameterTypeAllocMap := (C.SQLSMALLINT)(parameterType), cgoAllocsUnknown
	clengthPrecision, clengthPrecisionAllocMap := (C.SQLULEN)(lengthPrecision), cgoAllocsUnknown
	cparameterScale, cparameterScaleAllocMap := (C.SQLSMALLINT)(parameterScale), cgoAllocsUnknown
	cparameterValue, cparameterValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(parameterValue)), cgoAllocsUnknown
	cstrLen_or_Ind, cstrLen_or_IndAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&strLen_or_Ind)))
	__ret := C.SQLBindParam(cstatementHandle, cparameterNumber, cvalueType, cparameterType, clengthPrecision, cparameterScale, cparameterValue, cstrLen_or_Ind)
	runtime.KeepAlive(cstrLen_or_IndAllocMap)
	runtime.KeepAlive(cparameterValueAllocMap)
	runtime.KeepAlive(cparameterScaleAllocMap)
	runtime.KeepAlive(clengthPrecisionAllocMap)
	runtime.KeepAlive(cparameterTypeAllocMap)
	runtime.KeepAlive(cvalueTypeAllocMap)
	runtime.KeepAlive(cparameterNumberAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLCancel function as declared in include/sql.h:603
func SQLCancel(statementHandle *SQLHSTMT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	__ret := C.SQLCancel(cstatementHandle)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLCancelHandle function as declared in include/sql.h:606
func SQLCancelHandle(handleType SQLSMALLINT, inputHandle *SQLHANDLE) SQLRETURN {
	chandleType, chandleTypeAllocMap := (C.SQLSMALLINT)(handleType), cgoAllocsUnknown
	cinputHandle, cinputHandleAllocMap := (C.SQLHANDLE)(unsafe.Pointer(inputHandle)), cgoAllocsUnknown
	__ret := C.SQLCancelHandle(chandleType, cinputHandle)
	runtime.KeepAlive(cinputHandleAllocMap)
	runtime.KeepAlive(chandleTypeAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLCloseCursor function as declared in include/sql.h:611
func SQLCloseCursor(statementHandle *SQLHSTMT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	__ret := C.SQLCloseCursor(cstatementHandle)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColAttribute function as declared in include/sql.h:613
func SQLColAttribute(statementHandle *SQLHSTMT, columnNumber SQLUSMALLINT, fieldIdentifier SQLUSMALLINT, characterAttribute *SQLPOINTER, bufferLength SQLSMALLINT, stringLength []SQLSMALLINT, numericAttribute []SQLLEN) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	ccolumnNumber, ccolumnNumberAllocMap := (C.SQLUSMALLINT)(columnNumber), cgoAllocsUnknown
	cfieldIdentifier, cfieldIdentifierAllocMap := (C.SQLUSMALLINT)(fieldIdentifier), cgoAllocsUnknown
	ccharacterAttribute, ccharacterAttributeAllocMap := (C.SQLPOINTER)(unsafe.Pointer(characterAttribute)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLSMALLINT)(bufferLength), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&stringLength)))
	cnumericAttribute, cnumericAttributeAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&numericAttribute)))
	__ret := C.SQLColAttribute(cstatementHandle, ccolumnNumber, cfieldIdentifier, ccharacterAttribute, cbufferLength, cstringLength, cnumericAttribute)
	runtime.KeepAlive(cnumericAttributeAllocMap)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(ccharacterAttributeAllocMap)
	runtime.KeepAlive(cfieldIdentifierAllocMap)
	runtime.KeepAlive(ccolumnNumberAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColumns function as declared in include/sql.h:625
func SQLColumns(statementHandle *SQLHSTMT, catalogName []SQLCHAR, nameLength1 SQLSMALLINT, schemaName []SQLCHAR, nameLength2 SQLSMALLINT, tableName []SQLCHAR, nameLength3 SQLSMALLINT, columnName []SQLCHAR, nameLength4 SQLSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	ccatalogName, ccatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&catalogName)))
	cnameLength1, cnameLength1AllocMap := (C.SQLSMALLINT)(nameLength1), cgoAllocsUnknown
	cschemaName, cschemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&schemaName)))
	cnameLength2, cnameLength2AllocMap := (C.SQLSMALLINT)(nameLength2), cgoAllocsUnknown
	ctableName, ctableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&tableName)))
	cnameLength3, cnameLength3AllocMap := (C.SQLSMALLINT)(nameLength3), cgoAllocsUnknown
	ccolumnName, ccolumnNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&columnName)))
	cnameLength4, cnameLength4AllocMap := (C.SQLSMALLINT)(nameLength4), cgoAllocsUnknown
	__ret := C.SQLColumns(cstatementHandle, ccatalogName, cnameLength1, cschemaName, cnameLength2, ctableName, cnameLength3, ccolumnName, cnameLength4)
	runtime.KeepAlive(cnameLength4AllocMap)
	runtime.KeepAlive(ccolumnNameAllocMap)
	runtime.KeepAlive(cnameLength3AllocMap)
	runtime.KeepAlive(ctableNameAllocMap)
	runtime.KeepAlive(cnameLength2AllocMap)
	runtime.KeepAlive(cschemaNameAllocMap)
	runtime.KeepAlive(cnameLength1AllocMap)
	runtime.KeepAlive(ccatalogNameAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLConnect function as declared in include/sql.h:632
func SQLConnect(connectionHandle *SQLHDBC, serverName []SQLCHAR, nameLength1 SQLSMALLINT, userName []SQLCHAR, nameLength2 SQLSMALLINT, authentication []SQLCHAR, nameLength3 SQLSMALLINT) SQLRETURN {
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	cserverName, cserverNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&serverName)))
	cnameLength1, cnameLength1AllocMap := (C.SQLSMALLINT)(nameLength1), cgoAllocsUnknown
	cuserName, cuserNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&userName)))
	cnameLength2, cnameLength2AllocMap := (C.SQLSMALLINT)(nameLength2), cgoAllocsUnknown
	cauthentication, cauthenticationAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&authentication)))
	cnameLength3, cnameLength3AllocMap := (C.SQLSMALLINT)(nameLength3), cgoAllocsUnknown
	__ret := C.SQLConnect(cconnectionHandle, cserverName, cnameLength1, cuserName, cnameLength2, cauthentication, cnameLength3)
	runtime.KeepAlive(cnameLength3AllocMap)
	runtime.KeepAlive(cauthenticationAllocMap)
	runtime.KeepAlive(cnameLength2AllocMap)
	runtime.KeepAlive(cuserNameAllocMap)
	runtime.KeepAlive(cnameLength1AllocMap)
	runtime.KeepAlive(cserverNameAllocMap)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLCopyDesc function as declared in include/sql.h:638
func SQLCopyDesc(sourceDescHandle *SQLHDESC, targetDescHandle *SQLHDESC) SQLRETURN {
	csourceDescHandle, csourceDescHandleAllocMap := (C.SQLHDESC)(unsafe.Pointer(sourceDescHandle)), cgoAllocsUnknown
	ctargetDescHandle, ctargetDescHandleAllocMap := (C.SQLHDESC)(unsafe.Pointer(targetDescHandle)), cgoAllocsUnknown
	__ret := C.SQLCopyDesc(csourceDescHandle, ctargetDescHandle)
	runtime.KeepAlive(ctargetDescHandleAllocMap)
	runtime.KeepAlive(csourceDescHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDataSources function as declared in include/sql.h:642
func SQLDataSources(environmentHandle *SQLHENV, direction SQLUSMALLINT, serverName []SQLCHAR, bufferLength1 SQLSMALLINT, nameLength1 []SQLSMALLINT, description []SQLCHAR, bufferLength2 SQLSMALLINT, nameLength2 []SQLSMALLINT) SQLRETURN {
	cenvironmentHandle, cenvironmentHandleAllocMap := (C.SQLHENV)(unsafe.Pointer(environmentHandle)), cgoAllocsUnknown
	cdirection, cdirectionAllocMap := (C.SQLUSMALLINT)(direction), cgoAllocsUnknown
	cserverName, cserverNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&serverName)))
	cbufferLength1, cbufferLength1AllocMap := (C.SQLSMALLINT)(bufferLength1), cgoAllocsUnknown
	cnameLength1, cnameLength1AllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&nameLength1)))
	cdescription, cdescriptionAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&description)))
	cbufferLength2, cbufferLength2AllocMap := (C.SQLSMALLINT)(bufferLength2), cgoAllocsUnknown
	cnameLength2, cnameLength2AllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&nameLength2)))
	__ret := C.SQLDataSources(cenvironmentHandle, cdirection, cserverName, cbufferLength1, cnameLength1, cdescription, cbufferLength2, cnameLength2)
	runtime.KeepAlive(cnameLength2AllocMap)
	runtime.KeepAlive(cbufferLength2AllocMap)
	runtime.KeepAlive(cdescriptionAllocMap)
	runtime.KeepAlive(cnameLength1AllocMap)
	runtime.KeepAlive(cbufferLength1AllocMap)
	runtime.KeepAlive(cserverNameAllocMap)
	runtime.KeepAlive(cdirectionAllocMap)
	runtime.KeepAlive(cenvironmentHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDescribeCol function as declared in include/sql.h:648
func SQLDescribeCol(statementHandle *SQLHSTMT, columnNumber SQLUSMALLINT, columnName *SQLCHAR, bufferLength SQLSMALLINT, nameLength *SQLSMALLINT, dataType *SQLSMALLINT, columnSize *SQLULEN, decimalDigits *SQLSMALLINT, nullable *SQLSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	ccolumnNumber, ccolumnNumberAllocMap := (C.SQLUSMALLINT)(columnNumber), cgoAllocsUnknown
	ccolumnName, ccolumnNameAllocMap := (*C.SQLCHAR)(unsafe.Pointer(columnName)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLSMALLINT)(bufferLength), cgoAllocsUnknown
	cnameLength, cnameLengthAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(nameLength)), cgoAllocsUnknown
	cdataType, cdataTypeAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(dataType)), cgoAllocsUnknown
	ccolumnSize, ccolumnSizeAllocMap := (*C.SQLULEN)(unsafe.Pointer(columnSize)), cgoAllocsUnknown
	cdecimalDigits, cdecimalDigitsAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(decimalDigits)), cgoAllocsUnknown
	cnullable, cnullableAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(nullable)), cgoAllocsUnknown
	__ret := C.SQLDescribeCol(cstatementHandle, ccolumnNumber, ccolumnName, cbufferLength, cnameLength, cdataType, ccolumnSize, cdecimalDigits, cnullable)
	runtime.KeepAlive(cnullableAllocMap)
	runtime.KeepAlive(cdecimalDigitsAllocMap)
	runtime.KeepAlive(ccolumnSizeAllocMap)
	runtime.KeepAlive(cdataTypeAllocMap)
	runtime.KeepAlive(cnameLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(ccolumnNameAllocMap)
	runtime.KeepAlive(ccolumnNumberAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDisconnect function as declared in include/sql.h:654
func SQLDisconnect(connectionHandle *SQLHDBC) SQLRETURN {
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	__ret := C.SQLDisconnect(cconnectionHandle)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLEndTran function as declared in include/sql.h:657
func SQLEndTran(handleType SQLSMALLINT, handle *SQLHANDLE, completionType SQLSMALLINT) SQLRETURN {
	chandleType, chandleTypeAllocMap := (C.SQLSMALLINT)(handleType), cgoAllocsUnknown
	chandle, chandleAllocMap := (C.SQLHANDLE)(unsafe.Pointer(handle)), cgoAllocsUnknown
	ccompletionType, ccompletionTypeAllocMap := (C.SQLSMALLINT)(completionType), cgoAllocsUnknown
	__ret := C.SQLEndTran(chandleType, chandle, ccompletionType)
	runtime.KeepAlive(ccompletionTypeAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	runtime.KeepAlive(chandleTypeAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLError function as declared in include/sql.h:661
func SQLError(environmentHandle *SQLHENV, connectionHandle *SQLHDBC, statementHandle *SQLHSTMT, sqlstate []SQLCHAR, nativeError []SQLINTEGER, messageText []SQLCHAR, bufferLength SQLSMALLINT, textLength []SQLSMALLINT) SQLRETURN {
	cenvironmentHandle, cenvironmentHandleAllocMap := (C.SQLHENV)(unsafe.Pointer(environmentHandle)), cgoAllocsUnknown
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	csqlstate, csqlstateAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&sqlstate)))
	cnativeError, cnativeErrorAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&nativeError)))
	cmessageText, cmessageTextAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&messageText)))
	cbufferLength, cbufferLengthAllocMap := (C.SQLSMALLINT)(bufferLength), cgoAllocsUnknown
	ctextLength, ctextLengthAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&textLength)))
	__ret := C.SQLError(cenvironmentHandle, cconnectionHandle, cstatementHandle, csqlstate, cnativeError, cmessageText, cbufferLength, ctextLength)
	runtime.KeepAlive(ctextLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(cmessageTextAllocMap)
	runtime.KeepAlive(cnativeErrorAllocMap)
	runtime.KeepAlive(csqlstateAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	runtime.KeepAlive(cenvironmentHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLExecDirect function as declared in include/sql.h:667
func SQLExecDirect(statementHandle *SQLHSTMT, statementText *SQLCHAR, textLength SQLINTEGER) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cstatementText, cstatementTextAllocMap := (*C.SQLCHAR)(unsafe.Pointer(statementText)), cgoAllocsUnknown
	ctextLength, ctextLengthAllocMap := (C.SQLINTEGER)(textLength), cgoAllocsUnknown
	__ret := C.SQLExecDirect(cstatementHandle, cstatementText, ctextLength)
	runtime.KeepAlive(ctextLengthAllocMap)
	runtime.KeepAlive(cstatementTextAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLExecute function as declared in include/sql.h:670
func SQLExecute(statementHandle *SQLHSTMT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	__ret := C.SQLExecute(cstatementHandle)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLFetch function as declared in include/sql.h:672
func SQLFetch(statementHandle *SQLHSTMT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	__ret := C.SQLFetch(cstatementHandle)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLFetchScroll function as declared in include/sql.h:675
func SQLFetchScroll(statementHandle *SQLHSTMT, fetchOrientation SQLSMALLINT, fetchOffset SQLLEN) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cfetchOrientation, cfetchOrientationAllocMap := (C.SQLSMALLINT)(fetchOrientation), cgoAllocsUnknown
	cfetchOffset, cfetchOffsetAllocMap := (C.SQLLEN)(fetchOffset), cgoAllocsUnknown
	__ret := C.SQLFetchScroll(cstatementHandle, cfetchOrientation, cfetchOffset)
	runtime.KeepAlive(cfetchOffsetAllocMap)
	runtime.KeepAlive(cfetchOrientationAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLFreeConnect function as declared in include/sql.h:679
func SQLFreeConnect(connectionHandle *SQLHDBC) SQLRETURN {
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	__ret := C.SQLFreeConnect(cconnectionHandle)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLFreeEnv function as declared in include/sql.h:681
func SQLFreeEnv(environmentHandle *SQLHENV) SQLRETURN {
	cenvironmentHandle, cenvironmentHandleAllocMap := (C.SQLHENV)(unsafe.Pointer(environmentHandle)), cgoAllocsUnknown
	__ret := C.SQLFreeEnv(cenvironmentHandle)
	runtime.KeepAlive(cenvironmentHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLFreeHandle function as declared in include/sql.h:684
func SQLFreeHandle(handleType SQLSMALLINT, handle *SQLHANDLE) SQLRETURN {
	chandleType, chandleTypeAllocMap := (C.SQLSMALLINT)(handleType), cgoAllocsUnknown
	chandle, chandleAllocMap := (C.SQLHANDLE)(unsafe.Pointer(handle)), cgoAllocsUnknown
	__ret := C.SQLFreeHandle(chandleType, chandle)
	runtime.KeepAlive(chandleAllocMap)
	runtime.KeepAlive(chandleTypeAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLFreeStmt function as declared in include/sql.h:687
func SQLFreeStmt(statementHandle *SQLHSTMT, option SQLUSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	coption, coptionAllocMap := (C.SQLUSMALLINT)(option), cgoAllocsUnknown
	__ret := C.SQLFreeStmt(cstatementHandle, coption)
	runtime.KeepAlive(coptionAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetConnectAttr function as declared in include/sql.h:691
func SQLGetConnectAttr(connectionHandle *SQLHDBC, attribute SQLINTEGER, value *SQLPOINTER, bufferLength SQLINTEGER, stringLength *SQLINTEGER) SQLRETURN {
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	cattribute, cattributeAllocMap := (C.SQLINTEGER)(attribute), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(value)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLINTEGER)(bufferLength), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := (*C.SQLINTEGER)(unsafe.Pointer(stringLength)), cgoAllocsUnknown
	__ret := C.SQLGetConnectAttr(cconnectionHandle, cattribute, cvalue, cbufferLength, cstringLength)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cattributeAllocMap)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetConnectOption function as declared in include/sql.h:696
func SQLGetConnectOption(connectionHandle *SQLHDBC, option SQLUSMALLINT, value *SQLPOINTER) SQLRETURN {
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	coption, coptionAllocMap := (C.SQLUSMALLINT)(option), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(value)), cgoAllocsUnknown
	__ret := C.SQLGetConnectOption(cconnectionHandle, coption, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(coptionAllocMap)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetCursorName function as declared in include/sql.h:699
func SQLGetCursorName(statementHandle *SQLHSTMT, cursorName []SQLCHAR, bufferLength SQLSMALLINT, nameLength []SQLSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	ccursorName, ccursorNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&cursorName)))
	cbufferLength, cbufferLengthAllocMap := (C.SQLSMALLINT)(bufferLength), cgoAllocsUnknown
	cnameLength, cnameLengthAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&nameLength)))
	__ret := C.SQLGetCursorName(cstatementHandle, ccursorName, cbufferLength, cnameLength)
	runtime.KeepAlive(cnameLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(ccursorNameAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetData function as declared in include/sql.h:703
func SQLGetData(statementHandle *SQLHSTMT, columnNumber SQLUSMALLINT, targetType SQLSMALLINT, targetValue *SQLPOINTER, bufferLength SQLLEN, strLen_or_Ind *SQLLEN) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	ccolumnNumber, ccolumnNumberAllocMap := (C.SQLUSMALLINT)(columnNumber), cgoAllocsUnknown
	ctargetType, ctargetTypeAllocMap := (C.SQLSMALLINT)(targetType), cgoAllocsUnknown
	ctargetValue, ctargetValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(targetValue)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLLEN)(bufferLength), cgoAllocsUnknown
	cstrLen_or_Ind, cstrLen_or_IndAllocMap := (*C.SQLLEN)(unsafe.Pointer(strLen_or_Ind)), cgoAllocsUnknown
	__ret := C.SQLGetData(cstatementHandle, ccolumnNumber, ctargetType, ctargetValue, cbufferLength, cstrLen_or_Ind)
	runtime.KeepAlive(cstrLen_or_IndAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(ctargetValueAllocMap)
	runtime.KeepAlive(ctargetTypeAllocMap)
	runtime.KeepAlive(ccolumnNumberAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDescField function as declared in include/sql.h:709
func SQLGetDescField(descriptorHandle *SQLHDESC, recNumber SQLSMALLINT, fieldIdentifier SQLSMALLINT, value *SQLPOINTER, bufferLength SQLINTEGER, stringLength []SQLINTEGER) SQLRETURN {
	cdescriptorHandle, cdescriptorHandleAllocMap := (C.SQLHDESC)(unsafe.Pointer(descriptorHandle)), cgoAllocsUnknown
	crecNumber, crecNumberAllocMap := (C.SQLSMALLINT)(recNumber), cgoAllocsUnknown
	cfieldIdentifier, cfieldIdentifierAllocMap := (C.SQLSMALLINT)(fieldIdentifier), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(value)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLINTEGER)(bufferLength), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&stringLength)))
	__ret := C.SQLGetDescField(cdescriptorHandle, crecNumber, cfieldIdentifier, cvalue, cbufferLength, cstringLength)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cfieldIdentifierAllocMap)
	runtime.KeepAlive(crecNumberAllocMap)
	runtime.KeepAlive(cdescriptorHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDescRec function as declared in include/sql.h:714
func SQLGetDescRec(descriptorHandle *SQLHDESC, recNumber SQLSMALLINT, name []SQLCHAR, bufferLength SQLSMALLINT, stringLength []SQLSMALLINT, kind []SQLSMALLINT, subType []SQLSMALLINT, length []SQLLEN, precision []SQLSMALLINT, scale []SQLSMALLINT, nullable []SQLSMALLINT) SQLRETURN {
	cdescriptorHandle, cdescriptorHandleAllocMap := (C.SQLHDESC)(unsafe.Pointer(descriptorHandle)), cgoAllocsUnknown
	crecNumber, crecNumberAllocMap := (C.SQLSMALLINT)(recNumber), cgoAllocsUnknown
	cname, cnameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&name)))
	cbufferLength, cbufferLengthAllocMap := (C.SQLSMALLINT)(bufferLength), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&stringLength)))
	ckind, ckindAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&kind)))
	csubType, csubTypeAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&subType)))
	clength, clengthAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&length)))
	cprecision, cprecisionAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&precision)))
	cscale, cscaleAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&scale)))
	cnullable, cnullableAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&nullable)))
	__ret := C.SQLGetDescRec(cdescriptorHandle, crecNumber, cname, cbufferLength, cstringLength, ckind, csubType, clength, cprecision, cscale, cnullable)
	runtime.KeepAlive(cnullableAllocMap)
	runtime.KeepAlive(cscaleAllocMap)
	runtime.KeepAlive(cprecisionAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(csubTypeAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(crecNumberAllocMap)
	runtime.KeepAlive(cdescriptorHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDiagField function as declared in include/sql.h:721
func SQLGetDiagField(handleType SQLSMALLINT, handle *SQLHANDLE, recNumber SQLSMALLINT, diagIdentifier SQLSMALLINT, diagInfo *SQLPOINTER, bufferLength SQLSMALLINT, stringLength []SQLSMALLINT) SQLRETURN {
	chandleType, chandleTypeAllocMap := (C.SQLSMALLINT)(handleType), cgoAllocsUnknown
	chandle, chandleAllocMap := (C.SQLHANDLE)(unsafe.Pointer(handle)), cgoAllocsUnknown
	crecNumber, crecNumberAllocMap := (C.SQLSMALLINT)(recNumber), cgoAllocsUnknown
	cdiagIdentifier, cdiagIdentifierAllocMap := (C.SQLSMALLINT)(diagIdentifier), cgoAllocsUnknown
	cdiagInfo, cdiagInfoAllocMap := (C.SQLPOINTER)(unsafe.Pointer(diagInfo)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLSMALLINT)(bufferLength), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&stringLength)))
	__ret := C.SQLGetDiagField(chandleType, chandle, crecNumber, cdiagIdentifier, cdiagInfo, cbufferLength, cstringLength)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(cdiagInfoAllocMap)
	runtime.KeepAlive(cdiagIdentifierAllocMap)
	runtime.KeepAlive(crecNumberAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	runtime.KeepAlive(chandleTypeAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDiagRec function as declared in include/sql.h:726
func SQLGetDiagRec(handleType SQLSMALLINT, handle *SQLHANDLE, recNumber SQLSMALLINT, sqlstate *SQLCHAR, nativeError *SQLINTEGER, messageText *SQLCHAR, bufferLength SQLSMALLINT, textLength *SQLSMALLINT) SQLRETURN {
	chandleType, chandleTypeAllocMap := (C.SQLSMALLINT)(handleType), cgoAllocsUnknown
	chandle, chandleAllocMap := (C.SQLHANDLE)(unsafe.Pointer(handle)), cgoAllocsUnknown
	crecNumber, crecNumberAllocMap := (C.SQLSMALLINT)(recNumber), cgoAllocsUnknown
	csqlstate, csqlstateAllocMap := (*C.SQLCHAR)(unsafe.Pointer(sqlstate)), cgoAllocsUnknown
	cnativeError, cnativeErrorAllocMap := (*C.SQLINTEGER)(unsafe.Pointer(nativeError)), cgoAllocsUnknown
	cmessageText, cmessageTextAllocMap := (*C.SQLCHAR)(unsafe.Pointer(messageText)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLSMALLINT)(bufferLength), cgoAllocsUnknown
	ctextLength, ctextLengthAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(textLength)), cgoAllocsUnknown
	__ret := C.SQLGetDiagRec(chandleType, chandle, crecNumber, csqlstate, cnativeError, cmessageText, cbufferLength, ctextLength)
	runtime.KeepAlive(ctextLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(cmessageTextAllocMap)
	runtime.KeepAlive(cnativeErrorAllocMap)
	runtime.KeepAlive(csqlstateAllocMap)
	runtime.KeepAlive(crecNumberAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	runtime.KeepAlive(chandleTypeAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetEnvAttr function as declared in include/sql.h:731
func SQLGetEnvAttr(environmentHandle *SQLHENV, attribute SQLINTEGER, value *SQLPOINTER, bufferLength SQLINTEGER, stringLength []SQLINTEGER) SQLRETURN {
	cenvironmentHandle, cenvironmentHandleAllocMap := (C.SQLHENV)(unsafe.Pointer(environmentHandle)), cgoAllocsUnknown
	cattribute, cattributeAllocMap := (C.SQLINTEGER)(attribute), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(value)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLINTEGER)(bufferLength), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&stringLength)))
	__ret := C.SQLGetEnvAttr(cenvironmentHandle, cattribute, cvalue, cbufferLength, cstringLength)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cattributeAllocMap)
	runtime.KeepAlive(cenvironmentHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetFunctions function as declared in include/sql.h:736
func SQLGetFunctions(connectionHandle *SQLHDBC, functionId SQLUSMALLINT, supported []SQLUSMALLINT) SQLRETURN {
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	cfunctionId, cfunctionIdAllocMap := (C.SQLUSMALLINT)(functionId), cgoAllocsUnknown
	csupported, csupportedAllocMap := copyPSQLUSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&supported)))
	__ret := C.SQLGetFunctions(cconnectionHandle, cfunctionId, csupported)
	runtime.KeepAlive(csupportedAllocMap)
	runtime.KeepAlive(cfunctionIdAllocMap)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetInfo function as declared in include/sql.h:739
func SQLGetInfo(connectionHandle *SQLHDBC, infoType SQLUSMALLINT, infoValue *SQLPOINTER, bufferLength SQLSMALLINT, stringLength []SQLSMALLINT) SQLRETURN {
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	cinfoType, cinfoTypeAllocMap := (C.SQLUSMALLINT)(infoType), cgoAllocsUnknown
	cinfoValue, cinfoValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(infoValue)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLSMALLINT)(bufferLength), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&stringLength)))
	__ret := C.SQLGetInfo(cconnectionHandle, cinfoType, cinfoValue, cbufferLength, cstringLength)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(cinfoValueAllocMap)
	runtime.KeepAlive(cinfoTypeAllocMap)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetStmtAttr function as declared in include/sql.h:744
func SQLGetStmtAttr(statementHandle *SQLHSTMT, attribute SQLINTEGER, value *SQLPOINTER, bufferLength SQLINTEGER, stringLength []SQLINTEGER) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cattribute, cattributeAllocMap := (C.SQLINTEGER)(attribute), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(value)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLINTEGER)(bufferLength), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&stringLength)))
	__ret := C.SQLGetStmtAttr(cstatementHandle, cattribute, cvalue, cbufferLength, cstringLength)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cattributeAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetStmtOption function as declared in include/sql.h:749
func SQLGetStmtOption(statementHandle *SQLHSTMT, option SQLUSMALLINT, value *SQLPOINTER) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	coption, coptionAllocMap := (C.SQLUSMALLINT)(option), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(value)), cgoAllocsUnknown
	__ret := C.SQLGetStmtOption(cstatementHandle, coption, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(coptionAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetTypeInfo function as declared in include/sql.h:752
func SQLGetTypeInfo(statementHandle *SQLHSTMT, dataType SQLSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cdataType, cdataTypeAllocMap := (C.SQLSMALLINT)(dataType), cgoAllocsUnknown
	__ret := C.SQLGetTypeInfo(cstatementHandle, cdataType)
	runtime.KeepAlive(cdataTypeAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLNumResultCols function as declared in include/sql.h:755
func SQLNumResultCols(statementHandle *SQLHSTMT, columnCount *SQLSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	ccolumnCount, ccolumnCountAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(columnCount)), cgoAllocsUnknown
	__ret := C.SQLNumResultCols(cstatementHandle, ccolumnCount)
	runtime.KeepAlive(ccolumnCountAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLParamData function as declared in include/sql.h:758
func SQLParamData(statementHandle *SQLHSTMT, value []*SQLPOINTER) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := copyPSQLPOINTERBytes((*sliceHeader)(unsafe.Pointer(&value)))
	__ret := C.SQLParamData(cstatementHandle, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLPrepare function as declared in include/sql.h:761
func SQLPrepare(statementHandle *SQLHSTMT, statementText *SQLCHAR, textLength SQLINTEGER) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cstatementText, cstatementTextAllocMap := (*C.SQLCHAR)(unsafe.Pointer(statementText)), cgoAllocsUnknown
	ctextLength, ctextLengthAllocMap := (C.SQLINTEGER)(textLength), cgoAllocsUnknown
	__ret := C.SQLPrepare(cstatementHandle, cstatementText, ctextLength)
	runtime.KeepAlive(ctextLengthAllocMap)
	runtime.KeepAlive(cstatementTextAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLPutData function as declared in include/sql.h:764
func SQLPutData(statementHandle *SQLHSTMT, data *SQLPOINTER, strLen_or_Ind SQLLEN) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cdata, cdataAllocMap := (C.SQLPOINTER)(unsafe.Pointer(data)), cgoAllocsUnknown
	cstrLen_or_Ind, cstrLen_or_IndAllocMap := (C.SQLLEN)(strLen_or_Ind), cgoAllocsUnknown
	__ret := C.SQLPutData(cstatementHandle, cdata, cstrLen_or_Ind)
	runtime.KeepAlive(cstrLen_or_IndAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLRowCount function as declared in include/sql.h:767
func SQLRowCount(statementHandle *SQLHSTMT, rowCount []SQLLEN) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	crowCount, crowCountAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&rowCount)))
	__ret := C.SQLRowCount(cstatementHandle, crowCount)
	runtime.KeepAlive(crowCountAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetConnectAttr function as declared in include/sql.h:771
func SQLSetConnectAttr(connectionHandle *SQLHDBC, attribute SQLINTEGER, value *SQLPOINTER, stringLength SQLINTEGER) SQLRETURN {
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	cattribute, cattributeAllocMap := (C.SQLINTEGER)(attribute), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(value)), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := (C.SQLINTEGER)(stringLength), cgoAllocsUnknown
	__ret := C.SQLSetConnectAttr(cconnectionHandle, cattribute, cvalue, cstringLength)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cattributeAllocMap)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetConnectOption function as declared in include/sql.h:776
func SQLSetConnectOption(connectionHandle *SQLHDBC, option SQLUSMALLINT, value SQLULEN) SQLRETURN {
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	coption, coptionAllocMap := (C.SQLUSMALLINT)(option), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLULEN)(value), cgoAllocsUnknown
	__ret := C.SQLSetConnectOption(cconnectionHandle, coption, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(coptionAllocMap)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetCursorName function as declared in include/sql.h:779
func SQLSetCursorName(statementHandle *SQLHSTMT, cursorName []SQLCHAR, nameLength SQLSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	ccursorName, ccursorNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&cursorName)))
	cnameLength, cnameLengthAllocMap := (C.SQLSMALLINT)(nameLength), cgoAllocsUnknown
	__ret := C.SQLSetCursorName(cstatementHandle, ccursorName, cnameLength)
	runtime.KeepAlive(cnameLengthAllocMap)
	runtime.KeepAlive(ccursorNameAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetDescField function as declared in include/sql.h:783
func SQLSetDescField(descriptorHandle *SQLHDESC, recNumber SQLSMALLINT, fieldIdentifier SQLSMALLINT, value *SQLPOINTER, bufferLength SQLINTEGER) SQLRETURN {
	cdescriptorHandle, cdescriptorHandleAllocMap := (C.SQLHDESC)(unsafe.Pointer(descriptorHandle)), cgoAllocsUnknown
	crecNumber, crecNumberAllocMap := (C.SQLSMALLINT)(recNumber), cgoAllocsUnknown
	cfieldIdentifier, cfieldIdentifierAllocMap := (C.SQLSMALLINT)(fieldIdentifier), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(value)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLINTEGER)(bufferLength), cgoAllocsUnknown
	__ret := C.SQLSetDescField(cdescriptorHandle, crecNumber, cfieldIdentifier, cvalue, cbufferLength)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cfieldIdentifierAllocMap)
	runtime.KeepAlive(crecNumberAllocMap)
	runtime.KeepAlive(cdescriptorHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetDescRec function as declared in include/sql.h:787
func SQLSetDescRec(descriptorHandle *SQLHDESC, recNumber SQLSMALLINT, kind SQLSMALLINT, subType SQLSMALLINT, length SQLLEN, precision SQLSMALLINT, scale SQLSMALLINT, data *SQLPOINTER, stringLength []SQLLEN, indicator []SQLLEN) SQLRETURN {
	cdescriptorHandle, cdescriptorHandleAllocMap := (C.SQLHDESC)(unsafe.Pointer(descriptorHandle)), cgoAllocsUnknown
	crecNumber, crecNumberAllocMap := (C.SQLSMALLINT)(recNumber), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.SQLSMALLINT)(kind), cgoAllocsUnknown
	csubType, csubTypeAllocMap := (C.SQLSMALLINT)(subType), cgoAllocsUnknown
	clength, clengthAllocMap := (C.SQLLEN)(length), cgoAllocsUnknown
	cprecision, cprecisionAllocMap := (C.SQLSMALLINT)(precision), cgoAllocsUnknown
	cscale, cscaleAllocMap := (C.SQLSMALLINT)(scale), cgoAllocsUnknown
	cdata, cdataAllocMap := (C.SQLPOINTER)(unsafe.Pointer(data)), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&stringLength)))
	cindicator, cindicatorAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&indicator)))
	__ret := C.SQLSetDescRec(cdescriptorHandle, crecNumber, ckind, csubType, clength, cprecision, cscale, cdata, cstringLength, cindicator)
	runtime.KeepAlive(cindicatorAllocMap)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(cscaleAllocMap)
	runtime.KeepAlive(cprecisionAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(csubTypeAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(crecNumberAllocMap)
	runtime.KeepAlive(cdescriptorHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetEnvAttr function as declared in include/sql.h:794
func SQLSetEnvAttr(environmentHandle *SQLHENV, attribute SQLINTEGER, value *SQLPOINTER, stringLength SQLINTEGER) SQLRETURN {
	cenvironmentHandle, cenvironmentHandleAllocMap := (C.SQLHENV)(unsafe.Pointer(environmentHandle)), cgoAllocsUnknown
	cattribute, cattributeAllocMap := (C.SQLINTEGER)(attribute), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(value)), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := (C.SQLINTEGER)(stringLength), cgoAllocsUnknown
	__ret := C.SQLSetEnvAttr(cenvironmentHandle, cattribute, cvalue, cstringLength)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cattributeAllocMap)
	runtime.KeepAlive(cenvironmentHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetParam function as declared in include/sql.h:799
func SQLSetParam(statementHandle *SQLHSTMT, parameterNumber SQLUSMALLINT, valueType SQLSMALLINT, parameterType SQLSMALLINT, lengthPrecision SQLULEN, parameterScale SQLSMALLINT, parameterValue *SQLPOINTER, strLen_or_Ind []SQLLEN) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cparameterNumber, cparameterNumberAllocMap := (C.SQLUSMALLINT)(parameterNumber), cgoAllocsUnknown
	cvalueType, cvalueTypeAllocMap := (C.SQLSMALLINT)(valueType), cgoAllocsUnknown
	cparameterType, cparameterTypeAllocMap := (C.SQLSMALLINT)(parameterType), cgoAllocsUnknown
	clengthPrecision, clengthPrecisionAllocMap := (C.SQLULEN)(lengthPrecision), cgoAllocsUnknown
	cparameterScale, cparameterScaleAllocMap := (C.SQLSMALLINT)(parameterScale), cgoAllocsUnknown
	cparameterValue, cparameterValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(parameterValue)), cgoAllocsUnknown
	cstrLen_or_Ind, cstrLen_or_IndAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&strLen_or_Ind)))
	__ret := C.SQLSetParam(cstatementHandle, cparameterNumber, cvalueType, cparameterType, clengthPrecision, cparameterScale, cparameterValue, cstrLen_or_Ind)
	runtime.KeepAlive(cstrLen_or_IndAllocMap)
	runtime.KeepAlive(cparameterValueAllocMap)
	runtime.KeepAlive(cparameterScaleAllocMap)
	runtime.KeepAlive(clengthPrecisionAllocMap)
	runtime.KeepAlive(cparameterTypeAllocMap)
	runtime.KeepAlive(cvalueTypeAllocMap)
	runtime.KeepAlive(cparameterNumberAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetStmtAttr function as declared in include/sql.h:806
func SQLSetStmtAttr(statementHandle *SQLHSTMT, attribute SQLINTEGER, value *SQLPOINTER, stringLength SQLINTEGER) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cattribute, cattributeAllocMap := (C.SQLINTEGER)(attribute), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(value)), cgoAllocsUnknown
	cstringLength, cstringLengthAllocMap := (C.SQLINTEGER)(stringLength), cgoAllocsUnknown
	__ret := C.SQLSetStmtAttr(cstatementHandle, cattribute, cvalue, cstringLength)
	runtime.KeepAlive(cstringLengthAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cattributeAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetStmtOption function as declared in include/sql.h:811
func SQLSetStmtOption(statementHandle *SQLHSTMT, option SQLUSMALLINT, value SQLULEN) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	coption, coptionAllocMap := (C.SQLUSMALLINT)(option), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLULEN)(value), cgoAllocsUnknown
	__ret := C.SQLSetStmtOption(cstatementHandle, coption, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(coptionAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSpecialColumns function as declared in include/sql.h:814
func SQLSpecialColumns(statementHandle *SQLHSTMT, identifierType SQLUSMALLINT, catalogName []SQLCHAR, nameLength1 SQLSMALLINT, schemaName []SQLCHAR, nameLength2 SQLSMALLINT, tableName []SQLCHAR, nameLength3 SQLSMALLINT, scope SQLUSMALLINT, nullable SQLUSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cidentifierType, cidentifierTypeAllocMap := (C.SQLUSMALLINT)(identifierType), cgoAllocsUnknown
	ccatalogName, ccatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&catalogName)))
	cnameLength1, cnameLength1AllocMap := (C.SQLSMALLINT)(nameLength1), cgoAllocsUnknown
	cschemaName, cschemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&schemaName)))
	cnameLength2, cnameLength2AllocMap := (C.SQLSMALLINT)(nameLength2), cgoAllocsUnknown
	ctableName, ctableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&tableName)))
	cnameLength3, cnameLength3AllocMap := (C.SQLSMALLINT)(nameLength3), cgoAllocsUnknown
	cscope, cscopeAllocMap := (C.SQLUSMALLINT)(scope), cgoAllocsUnknown
	cnullable, cnullableAllocMap := (C.SQLUSMALLINT)(nullable), cgoAllocsUnknown
	__ret := C.SQLSpecialColumns(cstatementHandle, cidentifierType, ccatalogName, cnameLength1, cschemaName, cnameLength2, ctableName, cnameLength3, cscope, cnullable)
	runtime.KeepAlive(cnullableAllocMap)
	runtime.KeepAlive(cscopeAllocMap)
	runtime.KeepAlive(cnameLength3AllocMap)
	runtime.KeepAlive(ctableNameAllocMap)
	runtime.KeepAlive(cnameLength2AllocMap)
	runtime.KeepAlive(cschemaNameAllocMap)
	runtime.KeepAlive(cnameLength1AllocMap)
	runtime.KeepAlive(ccatalogNameAllocMap)
	runtime.KeepAlive(cidentifierTypeAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLStatistics function as declared in include/sql.h:821
func SQLStatistics(statementHandle *SQLHSTMT, catalogName []SQLCHAR, nameLength1 SQLSMALLINT, schemaName []SQLCHAR, nameLength2 SQLSMALLINT, tableName []SQLCHAR, nameLength3 SQLSMALLINT, unique SQLUSMALLINT, reserved SQLUSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	ccatalogName, ccatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&catalogName)))
	cnameLength1, cnameLength1AllocMap := (C.SQLSMALLINT)(nameLength1), cgoAllocsUnknown
	cschemaName, cschemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&schemaName)))
	cnameLength2, cnameLength2AllocMap := (C.SQLSMALLINT)(nameLength2), cgoAllocsUnknown
	ctableName, ctableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&tableName)))
	cnameLength3, cnameLength3AllocMap := (C.SQLSMALLINT)(nameLength3), cgoAllocsUnknown
	cunique, cuniqueAllocMap := (C.SQLUSMALLINT)(unique), cgoAllocsUnknown
	creserved, creservedAllocMap := (C.SQLUSMALLINT)(reserved), cgoAllocsUnknown
	__ret := C.SQLStatistics(cstatementHandle, ccatalogName, cnameLength1, cschemaName, cnameLength2, ctableName, cnameLength3, cunique, creserved)
	runtime.KeepAlive(creservedAllocMap)
	runtime.KeepAlive(cuniqueAllocMap)
	runtime.KeepAlive(cnameLength3AllocMap)
	runtime.KeepAlive(ctableNameAllocMap)
	runtime.KeepAlive(cnameLength2AllocMap)
	runtime.KeepAlive(cschemaNameAllocMap)
	runtime.KeepAlive(cnameLength1AllocMap)
	runtime.KeepAlive(ccatalogNameAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLTables function as declared in include/sql.h:827
func SQLTables(statementHandle *SQLHSTMT, catalogName []SQLCHAR, nameLength1 SQLSMALLINT, schemaName []SQLCHAR, nameLength2 SQLSMALLINT, tableName []SQLCHAR, nameLength3 SQLSMALLINT, tableType []SQLCHAR, nameLength4 SQLSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	ccatalogName, ccatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&catalogName)))
	cnameLength1, cnameLength1AllocMap := (C.SQLSMALLINT)(nameLength1), cgoAllocsUnknown
	cschemaName, cschemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&schemaName)))
	cnameLength2, cnameLength2AllocMap := (C.SQLSMALLINT)(nameLength2), cgoAllocsUnknown
	ctableName, ctableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&tableName)))
	cnameLength3, cnameLength3AllocMap := (C.SQLSMALLINT)(nameLength3), cgoAllocsUnknown
	ctableType, ctableTypeAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&tableType)))
	cnameLength4, cnameLength4AllocMap := (C.SQLSMALLINT)(nameLength4), cgoAllocsUnknown
	__ret := C.SQLTables(cstatementHandle, ccatalogName, cnameLength1, cschemaName, cnameLength2, ctableName, cnameLength3, ctableType, cnameLength4)
	runtime.KeepAlive(cnameLength4AllocMap)
	runtime.KeepAlive(ctableTypeAllocMap)
	runtime.KeepAlive(cnameLength3AllocMap)
	runtime.KeepAlive(ctableNameAllocMap)
	runtime.KeepAlive(cnameLength2AllocMap)
	runtime.KeepAlive(cschemaNameAllocMap)
	runtime.KeepAlive(cnameLength1AllocMap)
	runtime.KeepAlive(ccatalogNameAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLTransact function as declared in include/sql.h:833
func SQLTransact(environmentHandle *SQLHENV, connectionHandle *SQLHDBC, completionType SQLUSMALLINT) SQLRETURN {
	cenvironmentHandle, cenvironmentHandleAllocMap := (C.SQLHENV)(unsafe.Pointer(environmentHandle)), cgoAllocsUnknown
	cconnectionHandle, cconnectionHandleAllocMap := (C.SQLHDBC)(unsafe.Pointer(connectionHandle)), cgoAllocsUnknown
	ccompletionType, ccompletionTypeAllocMap := (C.SQLUSMALLINT)(completionType), cgoAllocsUnknown
	__ret := C.SQLTransact(cenvironmentHandle, cconnectionHandle, ccompletionType)
	runtime.KeepAlive(ccompletionTypeAllocMap)
	runtime.KeepAlive(cconnectionHandleAllocMap)
	runtime.KeepAlive(cenvironmentHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDriverConnect function as declared in include/sqlext.h:1790
func SQLDriverConnect(hdbc *SQLHDBC, hwnd *SQLHWND, szConnStrIn *SQLCHAR, cbConnStrIn SQLSMALLINT, szConnStrOut *SQLCHAR, cbConnStrOutMax SQLSMALLINT, pcbConnStrOut *SQLSMALLINT, fDriverCompletion SQLUSMALLINT) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	chwnd, chwndAllocMap := (C.SQLHWND)(unsafe.Pointer(hwnd)), cgoAllocsUnknown
	cszConnStrIn, cszConnStrInAllocMap := (*C.SQLCHAR)(unsafe.Pointer(szConnStrIn)), cgoAllocsUnknown
	ccbConnStrIn, ccbConnStrInAllocMap := (C.SQLSMALLINT)(cbConnStrIn), cgoAllocsUnknown
	cszConnStrOut, cszConnStrOutAllocMap := (*C.SQLCHAR)(unsafe.Pointer(szConnStrOut)), cgoAllocsUnknown
	ccbConnStrOutMax, ccbConnStrOutMaxAllocMap := (C.SQLSMALLINT)(cbConnStrOutMax), cgoAllocsUnknown
	cpcbConnStrOut, cpcbConnStrOutAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pcbConnStrOut)), cgoAllocsUnknown
	cfDriverCompletion, cfDriverCompletionAllocMap := (C.SQLUSMALLINT)(fDriverCompletion), cgoAllocsUnknown
	__ret := C.SQLDriverConnect(chdbc, chwnd, cszConnStrIn, ccbConnStrIn, cszConnStrOut, ccbConnStrOutMax, cpcbConnStrOut, cfDriverCompletion)
	runtime.KeepAlive(cfDriverCompletionAllocMap)
	runtime.KeepAlive(cpcbConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrOutMaxAllocMap)
	runtime.KeepAlive(cszConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrInAllocMap)
	runtime.KeepAlive(cszConnStrInAllocMap)
	runtime.KeepAlive(chwndAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLBrowseConnect function as declared in include/sqlext.h:1901
func SQLBrowseConnect(hdbc *SQLHDBC, szConnStrIn []SQLCHAR, cbConnStrIn SQLSMALLINT, szConnStrOut []SQLCHAR, cbConnStrOutMax SQLSMALLINT, pcbConnStrOut []SQLSMALLINT) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cszConnStrIn, cszConnStrInAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szConnStrIn)))
	ccbConnStrIn, ccbConnStrInAllocMap := (C.SQLSMALLINT)(cbConnStrIn), cgoAllocsUnknown
	cszConnStrOut, cszConnStrOutAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szConnStrOut)))
	ccbConnStrOutMax, ccbConnStrOutMaxAllocMap := (C.SQLSMALLINT)(cbConnStrOutMax), cgoAllocsUnknown
	cpcbConnStrOut, cpcbConnStrOutAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbConnStrOut)))
	__ret := C.SQLBrowseConnect(chdbc, cszConnStrIn, ccbConnStrIn, cszConnStrOut, ccbConnStrOutMax, cpcbConnStrOut)
	runtime.KeepAlive(cpcbConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrOutMaxAllocMap)
	runtime.KeepAlive(cszConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrInAllocMap)
	runtime.KeepAlive(cszConnStrInAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLBulkOperations function as declared in include/sqlext.h:1910
func SQLBulkOperations(statementHandle *SQLHSTMT, operation SQLSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	coperation, coperationAllocMap := (C.SQLSMALLINT)(operation), cgoAllocsUnknown
	__ret := C.SQLBulkOperations(cstatementHandle, coperation)
	runtime.KeepAlive(coperationAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColAttributes function as declared in include/sqlext.h:1915
func SQLColAttributes(hstmt *SQLHSTMT, icol SQLUSMALLINT, fDescType SQLUSMALLINT, rgbDesc *SQLPOINTER, cbDescMax SQLSMALLINT, pcbDesc []SQLSMALLINT, pfDesc []SQLLEN) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cicol, cicolAllocMap := (C.SQLUSMALLINT)(icol), cgoAllocsUnknown
	cfDescType, cfDescTypeAllocMap := (C.SQLUSMALLINT)(fDescType), cgoAllocsUnknown
	crgbDesc, crgbDescAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbDesc)), cgoAllocsUnknown
	ccbDescMax, ccbDescMaxAllocMap := (C.SQLSMALLINT)(cbDescMax), cgoAllocsUnknown
	cpcbDesc, cpcbDescAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDesc)))
	cpfDesc, cpfDescAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&pfDesc)))
	__ret := C.SQLColAttributes(chstmt, cicol, cfDescType, crgbDesc, ccbDescMax, cpcbDesc, cpfDesc)
	runtime.KeepAlive(cpfDescAllocMap)
	runtime.KeepAlive(cpcbDescAllocMap)
	runtime.KeepAlive(ccbDescMaxAllocMap)
	runtime.KeepAlive(crgbDescAllocMap)
	runtime.KeepAlive(cfDescTypeAllocMap)
	runtime.KeepAlive(cicolAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColumnPrivileges function as declared in include/sqlext.h:1924
func SQLColumnPrivileges(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLCHAR, cbTableName SQLSMALLINT, szColumnName []SQLCHAR, cbColumnName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	cszColumnName, cszColumnNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szColumnName)))
	ccbColumnName, ccbColumnNameAllocMap := (C.SQLSMALLINT)(cbColumnName), cgoAllocsUnknown
	__ret := C.SQLColumnPrivileges(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName, cszColumnName, ccbColumnName)
	runtime.KeepAlive(ccbColumnNameAllocMap)
	runtime.KeepAlive(cszColumnNameAllocMap)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDescribeParam function as declared in include/sqlext.h:1935
func SQLDescribeParam(hstmt *SQLHSTMT, ipar SQLUSMALLINT, pfSqlType *SQLSMALLINT, pcbParamDef *SQLULEN, pibScale *SQLSMALLINT, pfNullable *SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cipar, ciparAllocMap := (C.SQLUSMALLINT)(ipar), cgoAllocsUnknown
	cpfSqlType, cpfSqlTypeAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pfSqlType)), cgoAllocsUnknown
	cpcbParamDef, cpcbParamDefAllocMap := (*C.SQLULEN)(unsafe.Pointer(pcbParamDef)), cgoAllocsUnknown
	cpibScale, cpibScaleAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pibScale)), cgoAllocsUnknown
	cpfNullable, cpfNullableAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pfNullable)), cgoAllocsUnknown
	__ret := C.SQLDescribeParam(chstmt, cipar, cpfSqlType, cpcbParamDef, cpibScale, cpfNullable)
	runtime.KeepAlive(cpfNullableAllocMap)
	runtime.KeepAlive(cpibScaleAllocMap)
	runtime.KeepAlive(cpcbParamDefAllocMap)
	runtime.KeepAlive(cpfSqlTypeAllocMap)
	runtime.KeepAlive(ciparAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLExtendedFetch function as declared in include/sqlext.h:1943
func SQLExtendedFetch(hstmt *SQLHSTMT, fFetchType SQLUSMALLINT, irow SQLLEN, pcrow []SQLULEN, rgfRowStatus []SQLUSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cfFetchType, cfFetchTypeAllocMap := (C.SQLUSMALLINT)(fFetchType), cgoAllocsUnknown
	cirow, cirowAllocMap := (C.SQLLEN)(irow), cgoAllocsUnknown
	cpcrow, cpcrowAllocMap := copyPSQLULENBytes((*sliceHeader)(unsafe.Pointer(&pcrow)))
	crgfRowStatus, crgfRowStatusAllocMap := copyPSQLUSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&rgfRowStatus)))
	__ret := C.SQLExtendedFetch(chstmt, cfFetchType, cirow, cpcrow, crgfRowStatus)
	runtime.KeepAlive(crgfRowStatusAllocMap)
	runtime.KeepAlive(cpcrowAllocMap)
	runtime.KeepAlive(cirowAllocMap)
	runtime.KeepAlive(cfFetchTypeAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLForeignKeys function as declared in include/sqlext.h:1950
func SQLForeignKeys(hstmt *SQLHSTMT, szPkCatalogName []SQLCHAR, cbPkCatalogName SQLSMALLINT, szPkSchemaName []SQLCHAR, cbPkSchemaName SQLSMALLINT, szPkTableName []SQLCHAR, cbPkTableName SQLSMALLINT, szFkCatalogName []SQLCHAR, cbFkCatalogName SQLSMALLINT, szFkSchemaName []SQLCHAR, cbFkSchemaName SQLSMALLINT, szFkTableName []SQLCHAR, cbFkTableName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszPkCatalogName, cszPkCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szPkCatalogName)))
	ccbPkCatalogName, ccbPkCatalogNameAllocMap := (C.SQLSMALLINT)(cbPkCatalogName), cgoAllocsUnknown
	cszPkSchemaName, cszPkSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szPkSchemaName)))
	ccbPkSchemaName, ccbPkSchemaNameAllocMap := (C.SQLSMALLINT)(cbPkSchemaName), cgoAllocsUnknown
	cszPkTableName, cszPkTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szPkTableName)))
	ccbPkTableName, ccbPkTableNameAllocMap := (C.SQLSMALLINT)(cbPkTableName), cgoAllocsUnknown
	cszFkCatalogName, cszFkCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szFkCatalogName)))
	ccbFkCatalogName, ccbFkCatalogNameAllocMap := (C.SQLSMALLINT)(cbFkCatalogName), cgoAllocsUnknown
	cszFkSchemaName, cszFkSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szFkSchemaName)))
	ccbFkSchemaName, ccbFkSchemaNameAllocMap := (C.SQLSMALLINT)(cbFkSchemaName), cgoAllocsUnknown
	cszFkTableName, cszFkTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szFkTableName)))
	ccbFkTableName, ccbFkTableNameAllocMap := (C.SQLSMALLINT)(cbFkTableName), cgoAllocsUnknown
	__ret := C.SQLForeignKeys(chstmt, cszPkCatalogName, ccbPkCatalogName, cszPkSchemaName, ccbPkSchemaName, cszPkTableName, ccbPkTableName, cszFkCatalogName, ccbFkCatalogName, cszFkSchemaName, ccbFkSchemaName, cszFkTableName, ccbFkTableName)
	runtime.KeepAlive(ccbFkTableNameAllocMap)
	runtime.KeepAlive(cszFkTableNameAllocMap)
	runtime.KeepAlive(ccbFkSchemaNameAllocMap)
	runtime.KeepAlive(cszFkSchemaNameAllocMap)
	runtime.KeepAlive(ccbFkCatalogNameAllocMap)
	runtime.KeepAlive(cszFkCatalogNameAllocMap)
	runtime.KeepAlive(ccbPkTableNameAllocMap)
	runtime.KeepAlive(cszPkTableNameAllocMap)
	runtime.KeepAlive(ccbPkSchemaNameAllocMap)
	runtime.KeepAlive(cszPkSchemaNameAllocMap)
	runtime.KeepAlive(ccbPkCatalogNameAllocMap)
	runtime.KeepAlive(cszPkCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLMoreResults function as declared in include/sqlext.h:1965
func SQLMoreResults(hstmt *SQLHSTMT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	__ret := C.SQLMoreResults(chstmt)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLNativeSql function as declared in include/sqlext.h:1968
func SQLNativeSql(hdbc *SQLHDBC, szSqlStrIn []SQLCHAR, cbSqlStrIn SQLINTEGER, szSqlStr []SQLCHAR, cbSqlStrMax SQLINTEGER, pcbSqlStr []SQLINTEGER) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cszSqlStrIn, cszSqlStrInAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSqlStrIn)))
	ccbSqlStrIn, ccbSqlStrInAllocMap := (C.SQLINTEGER)(cbSqlStrIn), cgoAllocsUnknown
	cszSqlStr, cszSqlStrAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSqlStr)))
	ccbSqlStrMax, ccbSqlStrMaxAllocMap := (C.SQLINTEGER)(cbSqlStrMax), cgoAllocsUnknown
	cpcbSqlStr, cpcbSqlStrAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&pcbSqlStr)))
	__ret := C.SQLNativeSql(chdbc, cszSqlStrIn, ccbSqlStrIn, cszSqlStr, ccbSqlStrMax, cpcbSqlStr)
	runtime.KeepAlive(cpcbSqlStrAllocMap)
	runtime.KeepAlive(ccbSqlStrMaxAllocMap)
	runtime.KeepAlive(cszSqlStrAllocMap)
	runtime.KeepAlive(ccbSqlStrInAllocMap)
	runtime.KeepAlive(cszSqlStrInAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLNumParams function as declared in include/sqlext.h:1976
func SQLNumParams(hstmt *SQLHSTMT, pcpar *SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cpcpar, cpcparAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pcpar)), cgoAllocsUnknown
	__ret := C.SQLNumParams(chstmt, cpcpar)
	runtime.KeepAlive(cpcparAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLParamOptions function as declared in include/sqlext.h:1980
func SQLParamOptions(hstmt *SQLHSTMT, crow SQLULEN, pirow []SQLULEN) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	ccrow, ccrowAllocMap := (C.SQLULEN)(crow), cgoAllocsUnknown
	cpirow, cpirowAllocMap := copyPSQLULENBytes((*sliceHeader)(unsafe.Pointer(&pirow)))
	__ret := C.SQLParamOptions(chstmt, ccrow, cpirow)
	runtime.KeepAlive(cpirowAllocMap)
	runtime.KeepAlive(ccrowAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLPrimaryKeys function as declared in include/sqlext.h:1985
func SQLPrimaryKeys(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLCHAR, cbTableName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	__ret := C.SQLPrimaryKeys(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLProcedureColumns function as declared in include/sqlext.h:1994
func SQLProcedureColumns(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szProcName []SQLCHAR, cbProcName SQLSMALLINT, szColumnName []SQLCHAR, cbColumnName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszProcName, cszProcNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szProcName)))
	ccbProcName, ccbProcNameAllocMap := (C.SQLSMALLINT)(cbProcName), cgoAllocsUnknown
	cszColumnName, cszColumnNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szColumnName)))
	ccbColumnName, ccbColumnNameAllocMap := (C.SQLSMALLINT)(cbColumnName), cgoAllocsUnknown
	__ret := C.SQLProcedureColumns(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszProcName, ccbProcName, cszColumnName, ccbColumnName)
	runtime.KeepAlive(ccbColumnNameAllocMap)
	runtime.KeepAlive(cszColumnNameAllocMap)
	runtime.KeepAlive(ccbProcNameAllocMap)
	runtime.KeepAlive(cszProcNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLProcedures function as declared in include/sqlext.h:2005
func SQLProcedures(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szProcName []SQLCHAR, cbProcName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszProcName, cszProcNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szProcName)))
	ccbProcName, ccbProcNameAllocMap := (C.SQLSMALLINT)(cbProcName), cgoAllocsUnknown
	__ret := C.SQLProcedures(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszProcName, ccbProcName)
	runtime.KeepAlive(ccbProcNameAllocMap)
	runtime.KeepAlive(cszProcNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetPos function as declared in include/sqlext.h:2014
func SQLSetPos(hstmt *SQLHSTMT, irow SQLSETPOSIROW, fOption SQLUSMALLINT, fLock SQLUSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cirow, cirowAllocMap := (C.SQLSETPOSIROW)(irow), cgoAllocsUnknown
	cfOption, cfOptionAllocMap := (C.SQLUSMALLINT)(fOption), cgoAllocsUnknown
	cfLock, cfLockAllocMap := (C.SQLUSMALLINT)(fLock), cgoAllocsUnknown
	__ret := C.SQLSetPos(chstmt, cirow, cfOption, cfLock)
	runtime.KeepAlive(cfLockAllocMap)
	runtime.KeepAlive(cfOptionAllocMap)
	runtime.KeepAlive(cirowAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLTablePrivileges function as declared in include/sqlext.h:2020
func SQLTablePrivileges(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLCHAR, cbTableName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	__ret := C.SQLTablePrivileges(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDrivers function as declared in include/sqlext.h:2029
func SQLDrivers(henv *SQLHENV, fDirection SQLUSMALLINT, szDriverDesc []SQLCHAR, cbDriverDescMax SQLSMALLINT, pcbDriverDesc []SQLSMALLINT, szDriverAttributes []SQLCHAR, cbDrvrAttrMax SQLSMALLINT, pcbDrvrAttr []SQLSMALLINT) SQLRETURN {
	chenv, chenvAllocMap := (C.SQLHENV)(unsafe.Pointer(henv)), cgoAllocsUnknown
	cfDirection, cfDirectionAllocMap := (C.SQLUSMALLINT)(fDirection), cgoAllocsUnknown
	cszDriverDesc, cszDriverDescAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szDriverDesc)))
	ccbDriverDescMax, ccbDriverDescMaxAllocMap := (C.SQLSMALLINT)(cbDriverDescMax), cgoAllocsUnknown
	cpcbDriverDesc, cpcbDriverDescAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDriverDesc)))
	cszDriverAttributes, cszDriverAttributesAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szDriverAttributes)))
	ccbDrvrAttrMax, ccbDrvrAttrMaxAllocMap := (C.SQLSMALLINT)(cbDrvrAttrMax), cgoAllocsUnknown
	cpcbDrvrAttr, cpcbDrvrAttrAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDrvrAttr)))
	__ret := C.SQLDrivers(chenv, cfDirection, cszDriverDesc, ccbDriverDescMax, cpcbDriverDesc, cszDriverAttributes, ccbDrvrAttrMax, cpcbDrvrAttr)
	runtime.KeepAlive(cpcbDrvrAttrAllocMap)
	runtime.KeepAlive(ccbDrvrAttrMaxAllocMap)
	runtime.KeepAlive(cszDriverAttributesAllocMap)
	runtime.KeepAlive(cpcbDriverDescAllocMap)
	runtime.KeepAlive(ccbDriverDescMaxAllocMap)
	runtime.KeepAlive(cszDriverDescAllocMap)
	runtime.KeepAlive(cfDirectionAllocMap)
	runtime.KeepAlive(chenvAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLBindParameter function as declared in include/sqlext.h:2039
func SQLBindParameter(hstmt *SQLHSTMT, ipar SQLUSMALLINT, fParamType SQLSMALLINT, fCType SQLSMALLINT, fSqlType SQLSMALLINT, cbColDef SQLULEN, ibScale SQLSMALLINT, rgbValue *SQLPOINTER, cbValueMax SQLLEN, pcbValue *SQLLEN) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cipar, ciparAllocMap := (C.SQLUSMALLINT)(ipar), cgoAllocsUnknown
	cfParamType, cfParamTypeAllocMap := (C.SQLSMALLINT)(fParamType), cgoAllocsUnknown
	cfCType, cfCTypeAllocMap := (C.SQLSMALLINT)(fCType), cgoAllocsUnknown
	cfSqlType, cfSqlTypeAllocMap := (C.SQLSMALLINT)(fSqlType), cgoAllocsUnknown
	ccbColDef, ccbColDefAllocMap := (C.SQLULEN)(cbColDef), cgoAllocsUnknown
	cibScale, cibScaleAllocMap := (C.SQLSMALLINT)(ibScale), cgoAllocsUnknown
	crgbValue, crgbValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbValue)), cgoAllocsUnknown
	ccbValueMax, ccbValueMaxAllocMap := (C.SQLLEN)(cbValueMax), cgoAllocsUnknown
	cpcbValue, cpcbValueAllocMap := (*C.SQLLEN)(unsafe.Pointer(pcbValue)), cgoAllocsUnknown
	__ret := C.SQLBindParameter(chstmt, cipar, cfParamType, cfCType, cfSqlType, ccbColDef, cibScale, crgbValue, ccbValueMax, cpcbValue)
	runtime.KeepAlive(cpcbValueAllocMap)
	runtime.KeepAlive(ccbValueMaxAllocMap)
	runtime.KeepAlive(crgbValueAllocMap)
	runtime.KeepAlive(cibScaleAllocMap)
	runtime.KeepAlive(ccbColDefAllocMap)
	runtime.KeepAlive(cfSqlTypeAllocMap)
	runtime.KeepAlive(cfCTypeAllocMap)
	runtime.KeepAlive(cfParamTypeAllocMap)
	runtime.KeepAlive(ciparAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLAllocHandleStd function as declared in include/sqlext.h:2077
func SQLAllocHandleStd(fHandleType SQLSMALLINT, hInput *SQLHANDLE, phOutput **SQLHANDLE) SQLRETURN {
	cfHandleType, cfHandleTypeAllocMap := (C.SQLSMALLINT)(fHandleType), cgoAllocsUnknown
	chInput, chInputAllocMap := (C.SQLHANDLE)(unsafe.Pointer(hInput)), cgoAllocsUnknown
	cphOutput, cphOutputAllocMap := (*C.SQLHANDLE)(unsafe.Pointer(phOutput)), cgoAllocsUnknown
	__ret := C.SQLAllocHandleStd(cfHandleType, chInput, cphOutput)
	runtime.KeepAlive(cphOutputAllocMap)
	runtime.KeepAlive(chInputAllocMap)
	runtime.KeepAlive(cfHandleTypeAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetScrollOptions function as declared in include/sqlext.h:2104
func SQLSetScrollOptions(hstmt *SQLHSTMT, fConcurrency SQLUSMALLINT, crowKeyset SQLLEN, crowRowset SQLUSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cfConcurrency, cfConcurrencyAllocMap := (C.SQLUSMALLINT)(fConcurrency), cgoAllocsUnknown
	ccrowKeyset, ccrowKeysetAllocMap := (C.SQLLEN)(crowKeyset), cgoAllocsUnknown
	ccrowRowset, ccrowRowsetAllocMap := (C.SQLUSMALLINT)(crowRowset), cgoAllocsUnknown
	__ret := C.SQLSetScrollOptions(chstmt, cfConcurrency, ccrowKeyset, ccrowRowset)
	runtime.KeepAlive(ccrowRowsetAllocMap)
	runtime.KeepAlive(ccrowKeysetAllocMap)
	runtime.KeepAlive(cfConcurrencyAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColAttributeW function as declared in include/sqlucode.h:29
func SQLColAttributeW(hstmt *SQLHSTMT, iCol SQLUSMALLINT, iField SQLUSMALLINT, pCharAttr *SQLPOINTER, cbCharAttrMax SQLSMALLINT, pcbCharAttr []SQLSMALLINT, pNumAttr []SQLLEN) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	ciCol, ciColAllocMap := (C.SQLUSMALLINT)(iCol), cgoAllocsUnknown
	ciField, ciFieldAllocMap := (C.SQLUSMALLINT)(iField), cgoAllocsUnknown
	cpCharAttr, cpCharAttrAllocMap := (C.SQLPOINTER)(unsafe.Pointer(pCharAttr)), cgoAllocsUnknown
	ccbCharAttrMax, ccbCharAttrMaxAllocMap := (C.SQLSMALLINT)(cbCharAttrMax), cgoAllocsUnknown
	cpcbCharAttr, cpcbCharAttrAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbCharAttr)))
	cpNumAttr, cpNumAttrAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&pNumAttr)))
	__ret := C.SQLColAttributeW(chstmt, ciCol, ciField, cpCharAttr, ccbCharAttrMax, cpcbCharAttr, cpNumAttr)
	runtime.KeepAlive(cpNumAttrAllocMap)
	runtime.KeepAlive(cpcbCharAttrAllocMap)
	runtime.KeepAlive(ccbCharAttrMaxAllocMap)
	runtime.KeepAlive(cpCharAttrAllocMap)
	runtime.KeepAlive(ciFieldAllocMap)
	runtime.KeepAlive(ciColAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColAttributesW function as declared in include/sqlucode.h:38
func SQLColAttributesW(hstmt *SQLHSTMT, icol SQLUSMALLINT, fDescType SQLUSMALLINT, rgbDesc *SQLPOINTER, cbDescMax SQLSMALLINT, pcbDesc []SQLSMALLINT, pfDesc []SQLLEN) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cicol, cicolAllocMap := (C.SQLUSMALLINT)(icol), cgoAllocsUnknown
	cfDescType, cfDescTypeAllocMap := (C.SQLUSMALLINT)(fDescType), cgoAllocsUnknown
	crgbDesc, crgbDescAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbDesc)), cgoAllocsUnknown
	ccbDescMax, ccbDescMaxAllocMap := (C.SQLSMALLINT)(cbDescMax), cgoAllocsUnknown
	cpcbDesc, cpcbDescAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDesc)))
	cpfDesc, cpfDescAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&pfDesc)))
	__ret := C.SQLColAttributesW(chstmt, cicol, cfDescType, crgbDesc, ccbDescMax, cpcbDesc, cpfDesc)
	runtime.KeepAlive(cpfDescAllocMap)
	runtime.KeepAlive(cpcbDescAllocMap)
	runtime.KeepAlive(ccbDescMaxAllocMap)
	runtime.KeepAlive(crgbDescAllocMap)
	runtime.KeepAlive(cfDescTypeAllocMap)
	runtime.KeepAlive(cicolAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLConnectW function as declared in include/sqlucode.h:47
func SQLConnectW(hdbc *SQLHDBC, szDSN []SQLWCHAR, cbDSN SQLSMALLINT, szUID []SQLWCHAR, cbUID SQLSMALLINT, szAuthStr []SQLWCHAR, cbAuthStr SQLSMALLINT) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cszDSN, cszDSNAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szDSN)))
	ccbDSN, ccbDSNAllocMap := (C.SQLSMALLINT)(cbDSN), cgoAllocsUnknown
	cszUID, cszUIDAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szUID)))
	ccbUID, ccbUIDAllocMap := (C.SQLSMALLINT)(cbUID), cgoAllocsUnknown
	cszAuthStr, cszAuthStrAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szAuthStr)))
	ccbAuthStr, ccbAuthStrAllocMap := (C.SQLSMALLINT)(cbAuthStr), cgoAllocsUnknown
	__ret := C.SQLConnectW(chdbc, cszDSN, ccbDSN, cszUID, ccbUID, cszAuthStr, ccbAuthStr)
	runtime.KeepAlive(ccbAuthStrAllocMap)
	runtime.KeepAlive(cszAuthStrAllocMap)
	runtime.KeepAlive(ccbUIDAllocMap)
	runtime.KeepAlive(cszUIDAllocMap)
	runtime.KeepAlive(ccbDSNAllocMap)
	runtime.KeepAlive(cszDSNAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDescribeColW function as declared in include/sqlucode.h:57
func SQLDescribeColW(hstmt *SQLHSTMT, icol SQLUSMALLINT, szColName *SQLWCHAR, cbColNameMax SQLSMALLINT, pcbColName *SQLSMALLINT, pfSqlType *SQLSMALLINT, pcbColDef *SQLULEN, pibScale *SQLSMALLINT, pfNullable *SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cicol, cicolAllocMap := (C.SQLUSMALLINT)(icol), cgoAllocsUnknown
	cszColName, cszColNameAllocMap := (*C.SQLWCHAR)(unsafe.Pointer(szColName)), cgoAllocsUnknown
	ccbColNameMax, ccbColNameMaxAllocMap := (C.SQLSMALLINT)(cbColNameMax), cgoAllocsUnknown
	cpcbColName, cpcbColNameAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pcbColName)), cgoAllocsUnknown
	cpfSqlType, cpfSqlTypeAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pfSqlType)), cgoAllocsUnknown
	cpcbColDef, cpcbColDefAllocMap := (*C.SQLULEN)(unsafe.Pointer(pcbColDef)), cgoAllocsUnknown
	cpibScale, cpibScaleAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pibScale)), cgoAllocsUnknown
	cpfNullable, cpfNullableAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pfNullable)), cgoAllocsUnknown
	__ret := C.SQLDescribeColW(chstmt, cicol, cszColName, ccbColNameMax, cpcbColName, cpfSqlType, cpcbColDef, cpibScale, cpfNullable)
	runtime.KeepAlive(cpfNullableAllocMap)
	runtime.KeepAlive(cpibScaleAllocMap)
	runtime.KeepAlive(cpcbColDefAllocMap)
	runtime.KeepAlive(cpfSqlTypeAllocMap)
	runtime.KeepAlive(cpcbColNameAllocMap)
	runtime.KeepAlive(ccbColNameMaxAllocMap)
	runtime.KeepAlive(cszColNameAllocMap)
	runtime.KeepAlive(cicolAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLErrorW function as declared in include/sqlucode.h:69
func SQLErrorW(henv *SQLHENV, hdbc *SQLHDBC, hstmt *SQLHSTMT, szSqlState []SQLWCHAR, pfNativeError []SQLINTEGER, szErrorMsg []SQLWCHAR, cbErrorMsgMax SQLSMALLINT, pcbErrorMsg []SQLSMALLINT) SQLRETURN {
	chenv, chenvAllocMap := (C.SQLHENV)(unsafe.Pointer(henv)), cgoAllocsUnknown
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszSqlState, cszSqlStateAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSqlState)))
	cpfNativeError, cpfNativeErrorAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&pfNativeError)))
	cszErrorMsg, cszErrorMsgAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szErrorMsg)))
	ccbErrorMsgMax, ccbErrorMsgMaxAllocMap := (C.SQLSMALLINT)(cbErrorMsgMax), cgoAllocsUnknown
	cpcbErrorMsg, cpcbErrorMsgAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbErrorMsg)))
	__ret := C.SQLErrorW(chenv, chdbc, chstmt, cszSqlState, cpfNativeError, cszErrorMsg, ccbErrorMsgMax, cpcbErrorMsg)
	runtime.KeepAlive(cpcbErrorMsgAllocMap)
	runtime.KeepAlive(ccbErrorMsgMaxAllocMap)
	runtime.KeepAlive(cszErrorMsgAllocMap)
	runtime.KeepAlive(cpfNativeErrorAllocMap)
	runtime.KeepAlive(cszSqlStateAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	runtime.KeepAlive(chenvAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLExecDirectW function as declared in include/sqlucode.h:79
func SQLExecDirectW(hstmt *SQLHSTMT, szSqlStr *SQLWCHAR, cbSqlStr SQLINTEGER) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszSqlStr, cszSqlStrAllocMap := (*C.SQLWCHAR)(unsafe.Pointer(szSqlStr)), cgoAllocsUnknown
	ccbSqlStr, ccbSqlStrAllocMap := (C.SQLINTEGER)(cbSqlStr), cgoAllocsUnknown
	__ret := C.SQLExecDirectW(chstmt, cszSqlStr, ccbSqlStr)
	runtime.KeepAlive(ccbSqlStrAllocMap)
	runtime.KeepAlive(cszSqlStrAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetConnectAttrW function as declared in include/sqlucode.h:84
func SQLGetConnectAttrW(hdbc *SQLHDBC, fAttribute SQLINTEGER, rgbValue *SQLPOINTER, cbValueMax SQLINTEGER, pcbValue *SQLINTEGER) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cfAttribute, cfAttributeAllocMap := (C.SQLINTEGER)(fAttribute), cgoAllocsUnknown
	crgbValue, crgbValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbValue)), cgoAllocsUnknown
	ccbValueMax, ccbValueMaxAllocMap := (C.SQLINTEGER)(cbValueMax), cgoAllocsUnknown
	cpcbValue, cpcbValueAllocMap := (*C.SQLINTEGER)(unsafe.Pointer(pcbValue)), cgoAllocsUnknown
	__ret := C.SQLGetConnectAttrW(chdbc, cfAttribute, crgbValue, ccbValueMax, cpcbValue)
	runtime.KeepAlive(cpcbValueAllocMap)
	runtime.KeepAlive(ccbValueMaxAllocMap)
	runtime.KeepAlive(crgbValueAllocMap)
	runtime.KeepAlive(cfAttributeAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetCursorNameW function as declared in include/sqlucode.h:91
func SQLGetCursorNameW(hstmt *SQLHSTMT, szCursor []SQLWCHAR, cbCursorMax SQLSMALLINT, pcbCursor []SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCursor, cszCursorAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szCursor)))
	ccbCursorMax, ccbCursorMaxAllocMap := (C.SQLSMALLINT)(cbCursorMax), cgoAllocsUnknown
	cpcbCursor, cpcbCursorAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbCursor)))
	__ret := C.SQLGetCursorNameW(chstmt, cszCursor, ccbCursorMax, cpcbCursor)
	runtime.KeepAlive(cpcbCursorAllocMap)
	runtime.KeepAlive(ccbCursorMaxAllocMap)
	runtime.KeepAlive(cszCursorAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetDescFieldW function as declared in include/sqlucode.h:98
func SQLSetDescFieldW(descriptorHandle *SQLHDESC, recNumber SQLSMALLINT, fieldIdentifier SQLSMALLINT, value *SQLPOINTER, bufferLength SQLINTEGER) SQLRETURN {
	cdescriptorHandle, cdescriptorHandleAllocMap := (C.SQLHDESC)(unsafe.Pointer(descriptorHandle)), cgoAllocsUnknown
	crecNumber, crecNumberAllocMap := (C.SQLSMALLINT)(recNumber), cgoAllocsUnknown
	cfieldIdentifier, cfieldIdentifierAllocMap := (C.SQLSMALLINT)(fieldIdentifier), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(value)), cgoAllocsUnknown
	cbufferLength, cbufferLengthAllocMap := (C.SQLINTEGER)(bufferLength), cgoAllocsUnknown
	__ret := C.SQLSetDescFieldW(cdescriptorHandle, crecNumber, cfieldIdentifier, cvalue, cbufferLength)
	runtime.KeepAlive(cbufferLengthAllocMap)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cfieldIdentifierAllocMap)
	runtime.KeepAlive(crecNumberAllocMap)
	runtime.KeepAlive(cdescriptorHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDescFieldW function as declared in include/sqlucode.h:106
func SQLGetDescFieldW(hdesc *SQLHDESC, iRecord SQLSMALLINT, iField SQLSMALLINT, rgbValue *SQLPOINTER, cbValueMax SQLINTEGER, pcbValue []SQLINTEGER) SQLRETURN {
	chdesc, chdescAllocMap := (C.SQLHDESC)(unsafe.Pointer(hdesc)), cgoAllocsUnknown
	ciRecord, ciRecordAllocMap := (C.SQLSMALLINT)(iRecord), cgoAllocsUnknown
	ciField, ciFieldAllocMap := (C.SQLSMALLINT)(iField), cgoAllocsUnknown
	crgbValue, crgbValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbValue)), cgoAllocsUnknown
	ccbValueMax, ccbValueMaxAllocMap := (C.SQLINTEGER)(cbValueMax), cgoAllocsUnknown
	cpcbValue, cpcbValueAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&pcbValue)))
	__ret := C.SQLGetDescFieldW(chdesc, ciRecord, ciField, crgbValue, ccbValueMax, cpcbValue)
	runtime.KeepAlive(cpcbValueAllocMap)
	runtime.KeepAlive(ccbValueMaxAllocMap)
	runtime.KeepAlive(crgbValueAllocMap)
	runtime.KeepAlive(ciFieldAllocMap)
	runtime.KeepAlive(ciRecordAllocMap)
	runtime.KeepAlive(chdescAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDescRecW function as declared in include/sqlucode.h:114
func SQLGetDescRecW(hdesc *SQLHDESC, iRecord SQLSMALLINT, szName []SQLWCHAR, cbNameMax SQLSMALLINT, pcbName []SQLSMALLINT, pfType []SQLSMALLINT, pfSubType []SQLSMALLINT, pLength []SQLLEN, pPrecision []SQLSMALLINT, pScale []SQLSMALLINT, pNullable []SQLSMALLINT) SQLRETURN {
	chdesc, chdescAllocMap := (C.SQLHDESC)(unsafe.Pointer(hdesc)), cgoAllocsUnknown
	ciRecord, ciRecordAllocMap := (C.SQLSMALLINT)(iRecord), cgoAllocsUnknown
	cszName, cszNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szName)))
	ccbNameMax, ccbNameMaxAllocMap := (C.SQLSMALLINT)(cbNameMax), cgoAllocsUnknown
	cpcbName, cpcbNameAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbName)))
	cpfType, cpfTypeAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pfType)))
	cpfSubType, cpfSubTypeAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pfSubType)))
	cpLength, cpLengthAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&pLength)))
	cpPrecision, cpPrecisionAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pPrecision)))
	cpScale, cpScaleAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pScale)))
	cpNullable, cpNullableAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pNullable)))
	__ret := C.SQLGetDescRecW(chdesc, ciRecord, cszName, ccbNameMax, cpcbName, cpfType, cpfSubType, cpLength, cpPrecision, cpScale, cpNullable)
	runtime.KeepAlive(cpNullableAllocMap)
	runtime.KeepAlive(cpScaleAllocMap)
	runtime.KeepAlive(cpPrecisionAllocMap)
	runtime.KeepAlive(cpLengthAllocMap)
	runtime.KeepAlive(cpfSubTypeAllocMap)
	runtime.KeepAlive(cpfTypeAllocMap)
	runtime.KeepAlive(cpcbNameAllocMap)
	runtime.KeepAlive(ccbNameMaxAllocMap)
	runtime.KeepAlive(cszNameAllocMap)
	runtime.KeepAlive(ciRecordAllocMap)
	runtime.KeepAlive(chdescAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDiagFieldW function as declared in include/sqlucode.h:127
func SQLGetDiagFieldW(fHandleType SQLSMALLINT, handle *SQLHANDLE, iRecord SQLSMALLINT, fDiagField SQLSMALLINT, rgbDiagInfo *SQLPOINTER, cbDiagInfoMax SQLSMALLINT, pcbDiagInfo []SQLSMALLINT) SQLRETURN {
	cfHandleType, cfHandleTypeAllocMap := (C.SQLSMALLINT)(fHandleType), cgoAllocsUnknown
	chandle, chandleAllocMap := (C.SQLHANDLE)(unsafe.Pointer(handle)), cgoAllocsUnknown
	ciRecord, ciRecordAllocMap := (C.SQLSMALLINT)(iRecord), cgoAllocsUnknown
	cfDiagField, cfDiagFieldAllocMap := (C.SQLSMALLINT)(fDiagField), cgoAllocsUnknown
	crgbDiagInfo, crgbDiagInfoAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbDiagInfo)), cgoAllocsUnknown
	ccbDiagInfoMax, ccbDiagInfoMaxAllocMap := (C.SQLSMALLINT)(cbDiagInfoMax), cgoAllocsUnknown
	cpcbDiagInfo, cpcbDiagInfoAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDiagInfo)))
	__ret := C.SQLGetDiagFieldW(cfHandleType, chandle, ciRecord, cfDiagField, crgbDiagInfo, ccbDiagInfoMax, cpcbDiagInfo)
	runtime.KeepAlive(cpcbDiagInfoAllocMap)
	runtime.KeepAlive(ccbDiagInfoMaxAllocMap)
	runtime.KeepAlive(crgbDiagInfoAllocMap)
	runtime.KeepAlive(cfDiagFieldAllocMap)
	runtime.KeepAlive(ciRecordAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	runtime.KeepAlive(cfHandleTypeAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDiagRecW function as declared in include/sqlucode.h:136
func SQLGetDiagRecW(fHandleType SQLSMALLINT, handle *SQLHANDLE, iRecord SQLSMALLINT, szSqlState *SQLWCHAR, pfNativeError *SQLINTEGER, szErrorMsg *SQLWCHAR, cbErrorMsgMax SQLSMALLINT, pcbErrorMsg *SQLSMALLINT) SQLRETURN {
	cfHandleType, cfHandleTypeAllocMap := (C.SQLSMALLINT)(fHandleType), cgoAllocsUnknown
	chandle, chandleAllocMap := (C.SQLHANDLE)(unsafe.Pointer(handle)), cgoAllocsUnknown
	ciRecord, ciRecordAllocMap := (C.SQLSMALLINT)(iRecord), cgoAllocsUnknown
	cszSqlState, cszSqlStateAllocMap := (*C.SQLWCHAR)(unsafe.Pointer(szSqlState)), cgoAllocsUnknown
	cpfNativeError, cpfNativeErrorAllocMap := (*C.SQLINTEGER)(unsafe.Pointer(pfNativeError)), cgoAllocsUnknown
	cszErrorMsg, cszErrorMsgAllocMap := (*C.SQLWCHAR)(unsafe.Pointer(szErrorMsg)), cgoAllocsUnknown
	ccbErrorMsgMax, ccbErrorMsgMaxAllocMap := (C.SQLSMALLINT)(cbErrorMsgMax), cgoAllocsUnknown
	cpcbErrorMsg, cpcbErrorMsgAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pcbErrorMsg)), cgoAllocsUnknown
	__ret := C.SQLGetDiagRecW(cfHandleType, chandle, ciRecord, cszSqlState, cpfNativeError, cszErrorMsg, ccbErrorMsgMax, cpcbErrorMsg)
	runtime.KeepAlive(cpcbErrorMsgAllocMap)
	runtime.KeepAlive(ccbErrorMsgMaxAllocMap)
	runtime.KeepAlive(cszErrorMsgAllocMap)
	runtime.KeepAlive(cpfNativeErrorAllocMap)
	runtime.KeepAlive(cszSqlStateAllocMap)
	runtime.KeepAlive(ciRecordAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	runtime.KeepAlive(cfHandleTypeAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLPrepareW function as declared in include/sqlucode.h:150
func SQLPrepareW(hstmt *SQLHSTMT, szSqlStr *SQLWCHAR, cbSqlStr SQLINTEGER) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszSqlStr, cszSqlStrAllocMap := (*C.SQLWCHAR)(unsafe.Pointer(szSqlStr)), cgoAllocsUnknown
	ccbSqlStr, ccbSqlStrAllocMap := (C.SQLINTEGER)(cbSqlStr), cgoAllocsUnknown
	__ret := C.SQLPrepareW(chstmt, cszSqlStr, ccbSqlStr)
	runtime.KeepAlive(ccbSqlStrAllocMap)
	runtime.KeepAlive(cszSqlStrAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetConnectAttrW function as declared in include/sqlucode.h:155
func SQLSetConnectAttrW(hdbc *SQLHDBC, fAttribute SQLINTEGER, rgbValue *SQLPOINTER, cbValue SQLINTEGER) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cfAttribute, cfAttributeAllocMap := (C.SQLINTEGER)(fAttribute), cgoAllocsUnknown
	crgbValue, crgbValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbValue)), cgoAllocsUnknown
	ccbValue, ccbValueAllocMap := (C.SQLINTEGER)(cbValue), cgoAllocsUnknown
	__ret := C.SQLSetConnectAttrW(chdbc, cfAttribute, crgbValue, ccbValue)
	runtime.KeepAlive(ccbValueAllocMap)
	runtime.KeepAlive(crgbValueAllocMap)
	runtime.KeepAlive(cfAttributeAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetCursorNameW function as declared in include/sqlucode.h:161
func SQLSetCursorNameW(hstmt *SQLHSTMT, szCursor []SQLWCHAR, cbCursor SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCursor, cszCursorAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szCursor)))
	ccbCursor, ccbCursorAllocMap := (C.SQLSMALLINT)(cbCursor), cgoAllocsUnknown
	__ret := C.SQLSetCursorNameW(chstmt, cszCursor, ccbCursor)
	runtime.KeepAlive(ccbCursorAllocMap)
	runtime.KeepAlive(cszCursorAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColumnsW function as declared in include/sqlucode.h:172
func SQLColumnsW(hstmt *SQLHSTMT, szCatalogName []SQLWCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLWCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLWCHAR, cbTableName SQLSMALLINT, szColumnName []SQLWCHAR, cbColumnName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	cszColumnName, cszColumnNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szColumnName)))
	ccbColumnName, ccbColumnNameAllocMap := (C.SQLSMALLINT)(cbColumnName), cgoAllocsUnknown
	__ret := C.SQLColumnsW(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName, cszColumnName, ccbColumnName)
	runtime.KeepAlive(ccbColumnNameAllocMap)
	runtime.KeepAlive(cszColumnNameAllocMap)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetConnectOptionW function as declared in include/sqlucode.h:183
func SQLGetConnectOptionW(hdbc *SQLHDBC, fOption SQLUSMALLINT, pvParam *SQLPOINTER) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cfOption, cfOptionAllocMap := (C.SQLUSMALLINT)(fOption), cgoAllocsUnknown
	cpvParam, cpvParamAllocMap := (C.SQLPOINTER)(unsafe.Pointer(pvParam)), cgoAllocsUnknown
	__ret := C.SQLGetConnectOptionW(chdbc, cfOption, cpvParam)
	runtime.KeepAlive(cpvParamAllocMap)
	runtime.KeepAlive(cfOptionAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetInfoW function as declared in include/sqlucode.h:190
func SQLGetInfoW(hdbc *SQLHDBC, fInfoType SQLUSMALLINT, rgbInfoValue *SQLPOINTER, cbInfoValueMax SQLSMALLINT, pcbInfoValue []SQLSMALLINT) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cfInfoType, cfInfoTypeAllocMap := (C.SQLUSMALLINT)(fInfoType), cgoAllocsUnknown
	crgbInfoValue, crgbInfoValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbInfoValue)), cgoAllocsUnknown
	ccbInfoValueMax, ccbInfoValueMaxAllocMap := (C.SQLSMALLINT)(cbInfoValueMax), cgoAllocsUnknown
	cpcbInfoValue, cpcbInfoValueAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbInfoValue)))
	__ret := C.SQLGetInfoW(chdbc, cfInfoType, crgbInfoValue, ccbInfoValueMax, cpcbInfoValue)
	runtime.KeepAlive(cpcbInfoValueAllocMap)
	runtime.KeepAlive(ccbInfoValueMaxAllocMap)
	runtime.KeepAlive(crgbInfoValueAllocMap)
	runtime.KeepAlive(cfInfoTypeAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetTypeInfoW function as declared in include/sqlucode.h:197
func SQLGetTypeInfoW(statementHandle *SQLHSTMT, dataType SQLSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cdataType, cdataTypeAllocMap := (C.SQLSMALLINT)(dataType), cgoAllocsUnknown
	__ret := C.SQLGetTypeInfoW(cstatementHandle, cdataType)
	runtime.KeepAlive(cdataTypeAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetConnectOptionW function as declared in include/sqlucode.h:202
func SQLSetConnectOptionW(hdbc *SQLHDBC, fOption SQLUSMALLINT, vParam SQLULEN) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cfOption, cfOptionAllocMap := (C.SQLUSMALLINT)(fOption), cgoAllocsUnknown
	cvParam, cvParamAllocMap := (C.SQLULEN)(vParam), cgoAllocsUnknown
	__ret := C.SQLSetConnectOptionW(chdbc, cfOption, cvParam)
	runtime.KeepAlive(cvParamAllocMap)
	runtime.KeepAlive(cfOptionAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSpecialColumnsW function as declared in include/sqlucode.h:208
func SQLSpecialColumnsW(hstmt *SQLHSTMT, fColType SQLUSMALLINT, szCatalogName []SQLWCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLWCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLWCHAR, cbTableName SQLSMALLINT, fScope SQLUSMALLINT, fNullable SQLUSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cfColType, cfColTypeAllocMap := (C.SQLUSMALLINT)(fColType), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	cfScope, cfScopeAllocMap := (C.SQLUSMALLINT)(fScope), cgoAllocsUnknown
	cfNullable, cfNullableAllocMap := (C.SQLUSMALLINT)(fNullable), cgoAllocsUnknown
	__ret := C.SQLSpecialColumnsW(chstmt, cfColType, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName, cfScope, cfNullable)
	runtime.KeepAlive(cfNullableAllocMap)
	runtime.KeepAlive(cfScopeAllocMap)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(cfColTypeAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLStatisticsW function as declared in include/sqlucode.h:220
func SQLStatisticsW(hstmt *SQLHSTMT, szCatalogName []SQLWCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLWCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLWCHAR, cbTableName SQLSMALLINT, fUnique SQLUSMALLINT, fAccuracy SQLUSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	cfUnique, cfUniqueAllocMap := (C.SQLUSMALLINT)(fUnique), cgoAllocsUnknown
	cfAccuracy, cfAccuracyAllocMap := (C.SQLUSMALLINT)(fAccuracy), cgoAllocsUnknown
	__ret := C.SQLStatisticsW(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName, cfUnique, cfAccuracy)
	runtime.KeepAlive(cfAccuracyAllocMap)
	runtime.KeepAlive(cfUniqueAllocMap)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLTablesW function as declared in include/sqlucode.h:231
func SQLTablesW(hstmt *SQLHSTMT, szCatalogName []SQLWCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLWCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLWCHAR, cbTableName SQLSMALLINT, szTableType []SQLWCHAR, cbTableType SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	cszTableType, cszTableTypeAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableType)))
	ccbTableType, ccbTableTypeAllocMap := (C.SQLSMALLINT)(cbTableType), cgoAllocsUnknown
	__ret := C.SQLTablesW(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName, cszTableType, ccbTableType)
	runtime.KeepAlive(ccbTableTypeAllocMap)
	runtime.KeepAlive(cszTableTypeAllocMap)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDataSourcesW function as declared in include/sqlucode.h:244
func SQLDataSourcesW(henv *SQLHENV, fDirection SQLUSMALLINT, szDSN []SQLWCHAR, cbDSNMax SQLSMALLINT, pcbDSN []SQLSMALLINT, szDescription []SQLWCHAR, cbDescriptionMax SQLSMALLINT, pcbDescription []SQLSMALLINT) SQLRETURN {
	chenv, chenvAllocMap := (C.SQLHENV)(unsafe.Pointer(henv)), cgoAllocsUnknown
	cfDirection, cfDirectionAllocMap := (C.SQLUSMALLINT)(fDirection), cgoAllocsUnknown
	cszDSN, cszDSNAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szDSN)))
	ccbDSNMax, ccbDSNMaxAllocMap := (C.SQLSMALLINT)(cbDSNMax), cgoAllocsUnknown
	cpcbDSN, cpcbDSNAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDSN)))
	cszDescription, cszDescriptionAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szDescription)))
	ccbDescriptionMax, ccbDescriptionMaxAllocMap := (C.SQLSMALLINT)(cbDescriptionMax), cgoAllocsUnknown
	cpcbDescription, cpcbDescriptionAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDescription)))
	__ret := C.SQLDataSourcesW(chenv, cfDirection, cszDSN, ccbDSNMax, cpcbDSN, cszDescription, ccbDescriptionMax, cpcbDescription)
	runtime.KeepAlive(cpcbDescriptionAllocMap)
	runtime.KeepAlive(ccbDescriptionMaxAllocMap)
	runtime.KeepAlive(cszDescriptionAllocMap)
	runtime.KeepAlive(cpcbDSNAllocMap)
	runtime.KeepAlive(ccbDSNMaxAllocMap)
	runtime.KeepAlive(cszDSNAllocMap)
	runtime.KeepAlive(cfDirectionAllocMap)
	runtime.KeepAlive(chenvAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDriverConnectW function as declared in include/sqlucode.h:257
func SQLDriverConnectW(hdbc *SQLHDBC, hwnd *SQLHWND, szConnStrIn *SQLWCHAR, cbConnStrIn SQLSMALLINT, szConnStrOut *SQLWCHAR, cbConnStrOutMax SQLSMALLINT, pcbConnStrOut *SQLSMALLINT, fDriverCompletion SQLUSMALLINT) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	chwnd, chwndAllocMap := (C.SQLHWND)(unsafe.Pointer(hwnd)), cgoAllocsUnknown
	cszConnStrIn, cszConnStrInAllocMap := (*C.SQLWCHAR)(unsafe.Pointer(szConnStrIn)), cgoAllocsUnknown
	ccbConnStrIn, ccbConnStrInAllocMap := (C.SQLSMALLINT)(cbConnStrIn), cgoAllocsUnknown
	cszConnStrOut, cszConnStrOutAllocMap := (*C.SQLWCHAR)(unsafe.Pointer(szConnStrOut)), cgoAllocsUnknown
	ccbConnStrOutMax, ccbConnStrOutMaxAllocMap := (C.SQLSMALLINT)(cbConnStrOutMax), cgoAllocsUnknown
	cpcbConnStrOut, cpcbConnStrOutAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pcbConnStrOut)), cgoAllocsUnknown
	cfDriverCompletion, cfDriverCompletionAllocMap := (C.SQLUSMALLINT)(fDriverCompletion), cgoAllocsUnknown
	__ret := C.SQLDriverConnectW(chdbc, chwnd, cszConnStrIn, ccbConnStrIn, cszConnStrOut, ccbConnStrOutMax, cpcbConnStrOut, cfDriverCompletion)
	runtime.KeepAlive(cfDriverCompletionAllocMap)
	runtime.KeepAlive(cpcbConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrOutMaxAllocMap)
	runtime.KeepAlive(cszConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrInAllocMap)
	runtime.KeepAlive(cszConnStrInAllocMap)
	runtime.KeepAlive(chwndAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLBrowseConnectW function as declared in include/sqlucode.h:268
func SQLBrowseConnectW(hdbc *SQLHDBC, szConnStrIn []SQLWCHAR, cbConnStrIn SQLSMALLINT, szConnStrOut []SQLWCHAR, cbConnStrOutMax SQLSMALLINT, pcbConnStrOut []SQLSMALLINT) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cszConnStrIn, cszConnStrInAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szConnStrIn)))
	ccbConnStrIn, ccbConnStrInAllocMap := (C.SQLSMALLINT)(cbConnStrIn), cgoAllocsUnknown
	cszConnStrOut, cszConnStrOutAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szConnStrOut)))
	ccbConnStrOutMax, ccbConnStrOutMaxAllocMap := (C.SQLSMALLINT)(cbConnStrOutMax), cgoAllocsUnknown
	cpcbConnStrOut, cpcbConnStrOutAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbConnStrOut)))
	__ret := C.SQLBrowseConnectW(chdbc, cszConnStrIn, ccbConnStrIn, cszConnStrOut, ccbConnStrOutMax, cpcbConnStrOut)
	runtime.KeepAlive(cpcbConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrOutMaxAllocMap)
	runtime.KeepAlive(cszConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrInAllocMap)
	runtime.KeepAlive(cszConnStrInAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColumnPrivilegesW function as declared in include/sqlucode.h:276
func SQLColumnPrivilegesW(hstmt *SQLHSTMT, szCatalogName []SQLWCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLWCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLWCHAR, cbTableName SQLSMALLINT, szColumnName []SQLWCHAR, cbColumnName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	cszColumnName, cszColumnNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szColumnName)))
	ccbColumnName, ccbColumnNameAllocMap := (C.SQLSMALLINT)(cbColumnName), cgoAllocsUnknown
	__ret := C.SQLColumnPrivilegesW(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName, cszColumnName, ccbColumnName)
	runtime.KeepAlive(ccbColumnNameAllocMap)
	runtime.KeepAlive(cszColumnNameAllocMap)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetStmtAttrW function as declared in include/sqlucode.h:287
func SQLGetStmtAttrW(hstmt *SQLHSTMT, fAttribute SQLINTEGER, rgbValue *SQLPOINTER, cbValueMax SQLINTEGER, pcbValue []SQLINTEGER) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cfAttribute, cfAttributeAllocMap := (C.SQLINTEGER)(fAttribute), cgoAllocsUnknown
	crgbValue, crgbValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbValue)), cgoAllocsUnknown
	ccbValueMax, ccbValueMaxAllocMap := (C.SQLINTEGER)(cbValueMax), cgoAllocsUnknown
	cpcbValue, cpcbValueAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&pcbValue)))
	__ret := C.SQLGetStmtAttrW(chstmt, cfAttribute, crgbValue, ccbValueMax, cpcbValue)
	runtime.KeepAlive(cpcbValueAllocMap)
	runtime.KeepAlive(ccbValueMaxAllocMap)
	runtime.KeepAlive(crgbValueAllocMap)
	runtime.KeepAlive(cfAttributeAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetStmtAttrW function as declared in include/sqlucode.h:294
func SQLSetStmtAttrW(hstmt *SQLHSTMT, fAttribute SQLINTEGER, rgbValue *SQLPOINTER, cbValueMax SQLINTEGER) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cfAttribute, cfAttributeAllocMap := (C.SQLINTEGER)(fAttribute), cgoAllocsUnknown
	crgbValue, crgbValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbValue)), cgoAllocsUnknown
	ccbValueMax, ccbValueMaxAllocMap := (C.SQLINTEGER)(cbValueMax), cgoAllocsUnknown
	__ret := C.SQLSetStmtAttrW(chstmt, cfAttribute, crgbValue, ccbValueMax)
	runtime.KeepAlive(ccbValueMaxAllocMap)
	runtime.KeepAlive(crgbValueAllocMap)
	runtime.KeepAlive(cfAttributeAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLForeignKeysW function as declared in include/sqlucode.h:300
func SQLForeignKeysW(hstmt *SQLHSTMT, szPkCatalogName []SQLWCHAR, cbPkCatalogName SQLSMALLINT, szPkSchemaName []SQLWCHAR, cbPkSchemaName SQLSMALLINT, szPkTableName []SQLWCHAR, cbPkTableName SQLSMALLINT, szFkCatalogName []SQLWCHAR, cbFkCatalogName SQLSMALLINT, szFkSchemaName []SQLWCHAR, cbFkSchemaName SQLSMALLINT, szFkTableName []SQLWCHAR, cbFkTableName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszPkCatalogName, cszPkCatalogNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szPkCatalogName)))
	ccbPkCatalogName, ccbPkCatalogNameAllocMap := (C.SQLSMALLINT)(cbPkCatalogName), cgoAllocsUnknown
	cszPkSchemaName, cszPkSchemaNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szPkSchemaName)))
	ccbPkSchemaName, ccbPkSchemaNameAllocMap := (C.SQLSMALLINT)(cbPkSchemaName), cgoAllocsUnknown
	cszPkTableName, cszPkTableNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szPkTableName)))
	ccbPkTableName, ccbPkTableNameAllocMap := (C.SQLSMALLINT)(cbPkTableName), cgoAllocsUnknown
	cszFkCatalogName, cszFkCatalogNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szFkCatalogName)))
	ccbFkCatalogName, ccbFkCatalogNameAllocMap := (C.SQLSMALLINT)(cbFkCatalogName), cgoAllocsUnknown
	cszFkSchemaName, cszFkSchemaNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szFkSchemaName)))
	ccbFkSchemaName, ccbFkSchemaNameAllocMap := (C.SQLSMALLINT)(cbFkSchemaName), cgoAllocsUnknown
	cszFkTableName, cszFkTableNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szFkTableName)))
	ccbFkTableName, ccbFkTableNameAllocMap := (C.SQLSMALLINT)(cbFkTableName), cgoAllocsUnknown
	__ret := C.SQLForeignKeysW(chstmt, cszPkCatalogName, ccbPkCatalogName, cszPkSchemaName, ccbPkSchemaName, cszPkTableName, ccbPkTableName, cszFkCatalogName, ccbFkCatalogName, cszFkSchemaName, ccbFkSchemaName, cszFkTableName, ccbFkTableName)
	runtime.KeepAlive(ccbFkTableNameAllocMap)
	runtime.KeepAlive(cszFkTableNameAllocMap)
	runtime.KeepAlive(ccbFkSchemaNameAllocMap)
	runtime.KeepAlive(cszFkSchemaNameAllocMap)
	runtime.KeepAlive(ccbFkCatalogNameAllocMap)
	runtime.KeepAlive(cszFkCatalogNameAllocMap)
	runtime.KeepAlive(ccbPkTableNameAllocMap)
	runtime.KeepAlive(cszPkTableNameAllocMap)
	runtime.KeepAlive(ccbPkSchemaNameAllocMap)
	runtime.KeepAlive(cszPkSchemaNameAllocMap)
	runtime.KeepAlive(ccbPkCatalogNameAllocMap)
	runtime.KeepAlive(cszPkCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLNativeSqlW function as declared in include/sqlucode.h:316
func SQLNativeSqlW(hdbc *SQLHDBC, szSqlStrIn []SQLWCHAR, cbSqlStrIn SQLINTEGER, szSqlStr []SQLWCHAR, cbSqlStrMax SQLINTEGER, pcbSqlStr []SQLINTEGER) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cszSqlStrIn, cszSqlStrInAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSqlStrIn)))
	ccbSqlStrIn, ccbSqlStrInAllocMap := (C.SQLINTEGER)(cbSqlStrIn), cgoAllocsUnknown
	cszSqlStr, cszSqlStrAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSqlStr)))
	ccbSqlStrMax, ccbSqlStrMaxAllocMap := (C.SQLINTEGER)(cbSqlStrMax), cgoAllocsUnknown
	cpcbSqlStr, cpcbSqlStrAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&pcbSqlStr)))
	__ret := C.SQLNativeSqlW(chdbc, cszSqlStrIn, ccbSqlStrIn, cszSqlStr, ccbSqlStrMax, cpcbSqlStr)
	runtime.KeepAlive(cpcbSqlStrAllocMap)
	runtime.KeepAlive(ccbSqlStrMaxAllocMap)
	runtime.KeepAlive(cszSqlStrAllocMap)
	runtime.KeepAlive(ccbSqlStrInAllocMap)
	runtime.KeepAlive(cszSqlStrInAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLPrimaryKeysW function as declared in include/sqlucode.h:325
func SQLPrimaryKeysW(hstmt *SQLHSTMT, szCatalogName []SQLWCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLWCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLWCHAR, cbTableName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	__ret := C.SQLPrimaryKeysW(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLProcedureColumnsW function as declared in include/sqlucode.h:334
func SQLProcedureColumnsW(hstmt *SQLHSTMT, szCatalogName []SQLWCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLWCHAR, cbSchemaName SQLSMALLINT, szProcName []SQLWCHAR, cbProcName SQLSMALLINT, szColumnName []SQLWCHAR, cbColumnName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszProcName, cszProcNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szProcName)))
	ccbProcName, ccbProcNameAllocMap := (C.SQLSMALLINT)(cbProcName), cgoAllocsUnknown
	cszColumnName, cszColumnNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szColumnName)))
	ccbColumnName, ccbColumnNameAllocMap := (C.SQLSMALLINT)(cbColumnName), cgoAllocsUnknown
	__ret := C.SQLProcedureColumnsW(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszProcName, ccbProcName, cszColumnName, ccbColumnName)
	runtime.KeepAlive(ccbColumnNameAllocMap)
	runtime.KeepAlive(cszColumnNameAllocMap)
	runtime.KeepAlive(ccbProcNameAllocMap)
	runtime.KeepAlive(cszProcNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLProceduresW function as declared in include/sqlucode.h:345
func SQLProceduresW(hstmt *SQLHSTMT, szCatalogName []SQLWCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLWCHAR, cbSchemaName SQLSMALLINT, szProcName []SQLWCHAR, cbProcName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszProcName, cszProcNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szProcName)))
	ccbProcName, ccbProcNameAllocMap := (C.SQLSMALLINT)(cbProcName), cgoAllocsUnknown
	__ret := C.SQLProceduresW(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszProcName, ccbProcName)
	runtime.KeepAlive(ccbProcNameAllocMap)
	runtime.KeepAlive(cszProcNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLTablePrivilegesW function as declared in include/sqlucode.h:355
func SQLTablePrivilegesW(hstmt *SQLHSTMT, szCatalogName []SQLWCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLWCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLWCHAR, cbTableName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	__ret := C.SQLTablePrivilegesW(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDriversW function as declared in include/sqlucode.h:364
func SQLDriversW(henv *SQLHENV, fDirection SQLUSMALLINT, szDriverDesc []SQLWCHAR, cbDriverDescMax SQLSMALLINT, pcbDriverDesc []SQLSMALLINT, szDriverAttributes []SQLWCHAR, cbDrvrAttrMax SQLSMALLINT, pcbDrvrAttr []SQLSMALLINT) SQLRETURN {
	chenv, chenvAllocMap := (C.SQLHENV)(unsafe.Pointer(henv)), cgoAllocsUnknown
	cfDirection, cfDirectionAllocMap := (C.SQLUSMALLINT)(fDirection), cgoAllocsUnknown
	cszDriverDesc, cszDriverDescAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szDriverDesc)))
	ccbDriverDescMax, ccbDriverDescMaxAllocMap := (C.SQLSMALLINT)(cbDriverDescMax), cgoAllocsUnknown
	cpcbDriverDesc, cpcbDriverDescAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDriverDesc)))
	cszDriverAttributes, cszDriverAttributesAllocMap := copyPSQLWCHARBytes((*sliceHeader)(unsafe.Pointer(&szDriverAttributes)))
	ccbDrvrAttrMax, ccbDrvrAttrMaxAllocMap := (C.SQLSMALLINT)(cbDrvrAttrMax), cgoAllocsUnknown
	cpcbDrvrAttr, cpcbDrvrAttrAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDrvrAttr)))
	__ret := C.SQLDriversW(chenv, cfDirection, cszDriverDesc, ccbDriverDescMax, cpcbDriverDesc, cszDriverAttributes, ccbDrvrAttrMax, cpcbDrvrAttr)
	runtime.KeepAlive(cpcbDrvrAttrAllocMap)
	runtime.KeepAlive(ccbDrvrAttrMaxAllocMap)
	runtime.KeepAlive(cszDriverAttributesAllocMap)
	runtime.KeepAlive(cpcbDriverDescAllocMap)
	runtime.KeepAlive(ccbDriverDescMaxAllocMap)
	runtime.KeepAlive(cszDriverDescAllocMap)
	runtime.KeepAlive(cfDirectionAllocMap)
	runtime.KeepAlive(chenvAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColAttributeA function as declared in include/sqlucode.h:377
func SQLColAttributeA(hstmt *SQLHSTMT, iCol SQLSMALLINT, iField SQLSMALLINT, pCharAttr *SQLPOINTER, cbCharAttrMax SQLSMALLINT, pcbCharAttr []SQLSMALLINT, pNumAttr []SQLLEN) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	ciCol, ciColAllocMap := (C.SQLSMALLINT)(iCol), cgoAllocsUnknown
	ciField, ciFieldAllocMap := (C.SQLSMALLINT)(iField), cgoAllocsUnknown
	cpCharAttr, cpCharAttrAllocMap := (C.SQLPOINTER)(unsafe.Pointer(pCharAttr)), cgoAllocsUnknown
	ccbCharAttrMax, ccbCharAttrMaxAllocMap := (C.SQLSMALLINT)(cbCharAttrMax), cgoAllocsUnknown
	cpcbCharAttr, cpcbCharAttrAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbCharAttr)))
	cpNumAttr, cpNumAttrAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&pNumAttr)))
	__ret := C.SQLColAttributeA(chstmt, ciCol, ciField, cpCharAttr, ccbCharAttrMax, cpcbCharAttr, cpNumAttr)
	runtime.KeepAlive(cpNumAttrAllocMap)
	runtime.KeepAlive(cpcbCharAttrAllocMap)
	runtime.KeepAlive(ccbCharAttrMaxAllocMap)
	runtime.KeepAlive(cpCharAttrAllocMap)
	runtime.KeepAlive(ciFieldAllocMap)
	runtime.KeepAlive(ciColAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColAttributesA function as declared in include/sqlucode.h:386
func SQLColAttributesA(hstmt *SQLHSTMT, icol SQLUSMALLINT, fDescType SQLUSMALLINT, rgbDesc *SQLPOINTER, cbDescMax SQLSMALLINT, pcbDesc []SQLSMALLINT, pfDesc []SQLLEN) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cicol, cicolAllocMap := (C.SQLUSMALLINT)(icol), cgoAllocsUnknown
	cfDescType, cfDescTypeAllocMap := (C.SQLUSMALLINT)(fDescType), cgoAllocsUnknown
	crgbDesc, crgbDescAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbDesc)), cgoAllocsUnknown
	ccbDescMax, ccbDescMaxAllocMap := (C.SQLSMALLINT)(cbDescMax), cgoAllocsUnknown
	cpcbDesc, cpcbDescAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDesc)))
	cpfDesc, cpfDescAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&pfDesc)))
	__ret := C.SQLColAttributesA(chstmt, cicol, cfDescType, crgbDesc, ccbDescMax, cpcbDesc, cpfDesc)
	runtime.KeepAlive(cpfDescAllocMap)
	runtime.KeepAlive(cpcbDescAllocMap)
	runtime.KeepAlive(ccbDescMaxAllocMap)
	runtime.KeepAlive(crgbDescAllocMap)
	runtime.KeepAlive(cfDescTypeAllocMap)
	runtime.KeepAlive(cicolAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLConnectA function as declared in include/sqlucode.h:395
func SQLConnectA(hdbc *SQLHDBC, szDSN []SQLCHAR, cbDSN SQLSMALLINT, szUID []SQLCHAR, cbUID SQLSMALLINT, szAuthStr []SQLCHAR, cbAuthStr SQLSMALLINT) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cszDSN, cszDSNAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szDSN)))
	ccbDSN, ccbDSNAllocMap := (C.SQLSMALLINT)(cbDSN), cgoAllocsUnknown
	cszUID, cszUIDAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szUID)))
	ccbUID, ccbUIDAllocMap := (C.SQLSMALLINT)(cbUID), cgoAllocsUnknown
	cszAuthStr, cszAuthStrAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szAuthStr)))
	ccbAuthStr, ccbAuthStrAllocMap := (C.SQLSMALLINT)(cbAuthStr), cgoAllocsUnknown
	__ret := C.SQLConnectA(chdbc, cszDSN, ccbDSN, cszUID, ccbUID, cszAuthStr, ccbAuthStr)
	runtime.KeepAlive(ccbAuthStrAllocMap)
	runtime.KeepAlive(cszAuthStrAllocMap)
	runtime.KeepAlive(ccbUIDAllocMap)
	runtime.KeepAlive(cszUIDAllocMap)
	runtime.KeepAlive(ccbDSNAllocMap)
	runtime.KeepAlive(cszDSNAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDescribeColA function as declared in include/sqlucode.h:405
func SQLDescribeColA(hstmt *SQLHSTMT, icol SQLUSMALLINT, szColName []SQLCHAR, cbColNameMax SQLSMALLINT, pcbColName []SQLSMALLINT, pfSqlType []SQLSMALLINT, pcbColDef []SQLULEN, pibScale []SQLSMALLINT, pfNullable []SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cicol, cicolAllocMap := (C.SQLUSMALLINT)(icol), cgoAllocsUnknown
	cszColName, cszColNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szColName)))
	ccbColNameMax, ccbColNameMaxAllocMap := (C.SQLSMALLINT)(cbColNameMax), cgoAllocsUnknown
	cpcbColName, cpcbColNameAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbColName)))
	cpfSqlType, cpfSqlTypeAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pfSqlType)))
	cpcbColDef, cpcbColDefAllocMap := copyPSQLULENBytes((*sliceHeader)(unsafe.Pointer(&pcbColDef)))
	cpibScale, cpibScaleAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pibScale)))
	cpfNullable, cpfNullableAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pfNullable)))
	__ret := C.SQLDescribeColA(chstmt, cicol, cszColName, ccbColNameMax, cpcbColName, cpfSqlType, cpcbColDef, cpibScale, cpfNullable)
	runtime.KeepAlive(cpfNullableAllocMap)
	runtime.KeepAlive(cpibScaleAllocMap)
	runtime.KeepAlive(cpcbColDefAllocMap)
	runtime.KeepAlive(cpfSqlTypeAllocMap)
	runtime.KeepAlive(cpcbColNameAllocMap)
	runtime.KeepAlive(ccbColNameMaxAllocMap)
	runtime.KeepAlive(cszColNameAllocMap)
	runtime.KeepAlive(cicolAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLErrorA function as declared in include/sqlucode.h:417
func SQLErrorA(henv *SQLHENV, hdbc *SQLHDBC, hstmt *SQLHSTMT, szSqlState []SQLCHAR, pfNativeError []SQLINTEGER, szErrorMsg []SQLCHAR, cbErrorMsgMax SQLSMALLINT, pcbErrorMsg []SQLSMALLINT) SQLRETURN {
	chenv, chenvAllocMap := (C.SQLHENV)(unsafe.Pointer(henv)), cgoAllocsUnknown
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszSqlState, cszSqlStateAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSqlState)))
	cpfNativeError, cpfNativeErrorAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&pfNativeError)))
	cszErrorMsg, cszErrorMsgAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szErrorMsg)))
	ccbErrorMsgMax, ccbErrorMsgMaxAllocMap := (C.SQLSMALLINT)(cbErrorMsgMax), cgoAllocsUnknown
	cpcbErrorMsg, cpcbErrorMsgAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbErrorMsg)))
	__ret := C.SQLErrorA(chenv, chdbc, chstmt, cszSqlState, cpfNativeError, cszErrorMsg, ccbErrorMsgMax, cpcbErrorMsg)
	runtime.KeepAlive(cpcbErrorMsgAllocMap)
	runtime.KeepAlive(ccbErrorMsgMaxAllocMap)
	runtime.KeepAlive(cszErrorMsgAllocMap)
	runtime.KeepAlive(cpfNativeErrorAllocMap)
	runtime.KeepAlive(cszSqlStateAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	runtime.KeepAlive(chenvAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLExecDirectA function as declared in include/sqlucode.h:427
func SQLExecDirectA(hstmt *SQLHSTMT, szSqlStr *SQLCHAR, cbSqlStr SQLINTEGER) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszSqlStr, cszSqlStrAllocMap := (*C.SQLCHAR)(unsafe.Pointer(szSqlStr)), cgoAllocsUnknown
	ccbSqlStr, ccbSqlStrAllocMap := (C.SQLINTEGER)(cbSqlStr), cgoAllocsUnknown
	__ret := C.SQLExecDirectA(chstmt, cszSqlStr, ccbSqlStr)
	runtime.KeepAlive(ccbSqlStrAllocMap)
	runtime.KeepAlive(cszSqlStrAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetConnectAttrA function as declared in include/sqlucode.h:432
func SQLGetConnectAttrA(hdbc *SQLHDBC, fAttribute SQLINTEGER, rgbValue *SQLPOINTER, cbValueMax SQLINTEGER, pcbValue *SQLINTEGER) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cfAttribute, cfAttributeAllocMap := (C.SQLINTEGER)(fAttribute), cgoAllocsUnknown
	crgbValue, crgbValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbValue)), cgoAllocsUnknown
	ccbValueMax, ccbValueMaxAllocMap := (C.SQLINTEGER)(cbValueMax), cgoAllocsUnknown
	cpcbValue, cpcbValueAllocMap := (*C.SQLINTEGER)(unsafe.Pointer(pcbValue)), cgoAllocsUnknown
	__ret := C.SQLGetConnectAttrA(chdbc, cfAttribute, crgbValue, ccbValueMax, cpcbValue)
	runtime.KeepAlive(cpcbValueAllocMap)
	runtime.KeepAlive(ccbValueMaxAllocMap)
	runtime.KeepAlive(crgbValueAllocMap)
	runtime.KeepAlive(cfAttributeAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetCursorNameA function as declared in include/sqlucode.h:439
func SQLGetCursorNameA(hstmt *SQLHSTMT, szCursor []SQLCHAR, cbCursorMax SQLSMALLINT, pcbCursor []SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCursor, cszCursorAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCursor)))
	ccbCursorMax, ccbCursorMaxAllocMap := (C.SQLSMALLINT)(cbCursorMax), cgoAllocsUnknown
	cpcbCursor, cpcbCursorAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbCursor)))
	__ret := C.SQLGetCursorNameA(chstmt, cszCursor, ccbCursorMax, cpcbCursor)
	runtime.KeepAlive(cpcbCursorAllocMap)
	runtime.KeepAlive(ccbCursorMaxAllocMap)
	runtime.KeepAlive(cszCursorAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDescFieldA function as declared in include/sqlucode.h:446
func SQLGetDescFieldA(hdesc *SQLHDESC, iRecord SQLSMALLINT, iField SQLSMALLINT, rgbValue *SQLPOINTER, cbValueMax SQLINTEGER, pcbValue []SQLINTEGER) SQLRETURN {
	chdesc, chdescAllocMap := (C.SQLHDESC)(unsafe.Pointer(hdesc)), cgoAllocsUnknown
	ciRecord, ciRecordAllocMap := (C.SQLSMALLINT)(iRecord), cgoAllocsUnknown
	ciField, ciFieldAllocMap := (C.SQLSMALLINT)(iField), cgoAllocsUnknown
	crgbValue, crgbValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbValue)), cgoAllocsUnknown
	ccbValueMax, ccbValueMaxAllocMap := (C.SQLINTEGER)(cbValueMax), cgoAllocsUnknown
	cpcbValue, cpcbValueAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&pcbValue)))
	__ret := C.SQLGetDescFieldA(chdesc, ciRecord, ciField, crgbValue, ccbValueMax, cpcbValue)
	runtime.KeepAlive(cpcbValueAllocMap)
	runtime.KeepAlive(ccbValueMaxAllocMap)
	runtime.KeepAlive(crgbValueAllocMap)
	runtime.KeepAlive(ciFieldAllocMap)
	runtime.KeepAlive(ciRecordAllocMap)
	runtime.KeepAlive(chdescAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDescRecA function as declared in include/sqlucode.h:454
func SQLGetDescRecA(hdesc *SQLHDESC, iRecord SQLSMALLINT, szName []SQLCHAR, cbNameMax SQLSMALLINT, pcbName []SQLSMALLINT, pfType []SQLSMALLINT, pfSubType []SQLSMALLINT, pLength []SQLLEN, pPrecision []SQLSMALLINT, pScale []SQLSMALLINT, pNullable []SQLSMALLINT) SQLRETURN {
	chdesc, chdescAllocMap := (C.SQLHDESC)(unsafe.Pointer(hdesc)), cgoAllocsUnknown
	ciRecord, ciRecordAllocMap := (C.SQLSMALLINT)(iRecord), cgoAllocsUnknown
	cszName, cszNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szName)))
	ccbNameMax, ccbNameMaxAllocMap := (C.SQLSMALLINT)(cbNameMax), cgoAllocsUnknown
	cpcbName, cpcbNameAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbName)))
	cpfType, cpfTypeAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pfType)))
	cpfSubType, cpfSubTypeAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pfSubType)))
	cpLength, cpLengthAllocMap := copyPSQLLENBytes((*sliceHeader)(unsafe.Pointer(&pLength)))
	cpPrecision, cpPrecisionAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pPrecision)))
	cpScale, cpScaleAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pScale)))
	cpNullable, cpNullableAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pNullable)))
	__ret := C.SQLGetDescRecA(chdesc, ciRecord, cszName, ccbNameMax, cpcbName, cpfType, cpfSubType, cpLength, cpPrecision, cpScale, cpNullable)
	runtime.KeepAlive(cpNullableAllocMap)
	runtime.KeepAlive(cpScaleAllocMap)
	runtime.KeepAlive(cpPrecisionAllocMap)
	runtime.KeepAlive(cpLengthAllocMap)
	runtime.KeepAlive(cpfSubTypeAllocMap)
	runtime.KeepAlive(cpfTypeAllocMap)
	runtime.KeepAlive(cpcbNameAllocMap)
	runtime.KeepAlive(ccbNameMaxAllocMap)
	runtime.KeepAlive(cszNameAllocMap)
	runtime.KeepAlive(ciRecordAllocMap)
	runtime.KeepAlive(chdescAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDiagFieldA function as declared in include/sqlucode.h:467
func SQLGetDiagFieldA(fHandleType SQLSMALLINT, handle *SQLHANDLE, iRecord SQLSMALLINT, fDiagField SQLSMALLINT, rgbDiagInfo *SQLPOINTER, cbDiagInfoMax SQLSMALLINT, pcbDiagInfo []SQLSMALLINT) SQLRETURN {
	cfHandleType, cfHandleTypeAllocMap := (C.SQLSMALLINT)(fHandleType), cgoAllocsUnknown
	chandle, chandleAllocMap := (C.SQLHANDLE)(unsafe.Pointer(handle)), cgoAllocsUnknown
	ciRecord, ciRecordAllocMap := (C.SQLSMALLINT)(iRecord), cgoAllocsUnknown
	cfDiagField, cfDiagFieldAllocMap := (C.SQLSMALLINT)(fDiagField), cgoAllocsUnknown
	crgbDiagInfo, crgbDiagInfoAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbDiagInfo)), cgoAllocsUnknown
	ccbDiagInfoMax, ccbDiagInfoMaxAllocMap := (C.SQLSMALLINT)(cbDiagInfoMax), cgoAllocsUnknown
	cpcbDiagInfo, cpcbDiagInfoAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDiagInfo)))
	__ret := C.SQLGetDiagFieldA(cfHandleType, chandle, ciRecord, cfDiagField, crgbDiagInfo, ccbDiagInfoMax, cpcbDiagInfo)
	runtime.KeepAlive(cpcbDiagInfoAllocMap)
	runtime.KeepAlive(ccbDiagInfoMaxAllocMap)
	runtime.KeepAlive(crgbDiagInfoAllocMap)
	runtime.KeepAlive(cfDiagFieldAllocMap)
	runtime.KeepAlive(ciRecordAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	runtime.KeepAlive(cfHandleTypeAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetDiagRecA function as declared in include/sqlucode.h:476
func SQLGetDiagRecA(fHandleType SQLSMALLINT, handle *SQLHANDLE, iRecord SQLSMALLINT, szSqlState *SQLCHAR, pfNativeError *SQLINTEGER, szErrorMsg *SQLCHAR, cbErrorMsgMax SQLSMALLINT, pcbErrorMsg *SQLSMALLINT) SQLRETURN {
	cfHandleType, cfHandleTypeAllocMap := (C.SQLSMALLINT)(fHandleType), cgoAllocsUnknown
	chandle, chandleAllocMap := (C.SQLHANDLE)(unsafe.Pointer(handle)), cgoAllocsUnknown
	ciRecord, ciRecordAllocMap := (C.SQLSMALLINT)(iRecord), cgoAllocsUnknown
	cszSqlState, cszSqlStateAllocMap := (*C.SQLCHAR)(unsafe.Pointer(szSqlState)), cgoAllocsUnknown
	cpfNativeError, cpfNativeErrorAllocMap := (*C.SQLINTEGER)(unsafe.Pointer(pfNativeError)), cgoAllocsUnknown
	cszErrorMsg, cszErrorMsgAllocMap := (*C.SQLCHAR)(unsafe.Pointer(szErrorMsg)), cgoAllocsUnknown
	ccbErrorMsgMax, ccbErrorMsgMaxAllocMap := (C.SQLSMALLINT)(cbErrorMsgMax), cgoAllocsUnknown
	cpcbErrorMsg, cpcbErrorMsgAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pcbErrorMsg)), cgoAllocsUnknown
	__ret := C.SQLGetDiagRecA(cfHandleType, chandle, ciRecord, cszSqlState, cpfNativeError, cszErrorMsg, ccbErrorMsgMax, cpcbErrorMsg)
	runtime.KeepAlive(cpcbErrorMsgAllocMap)
	runtime.KeepAlive(ccbErrorMsgMaxAllocMap)
	runtime.KeepAlive(cszErrorMsgAllocMap)
	runtime.KeepAlive(cpfNativeErrorAllocMap)
	runtime.KeepAlive(cszSqlStateAllocMap)
	runtime.KeepAlive(ciRecordAllocMap)
	runtime.KeepAlive(chandleAllocMap)
	runtime.KeepAlive(cfHandleTypeAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetStmtAttrA function as declared in include/sqlucode.h:487
func SQLGetStmtAttrA(hstmt *SQLHSTMT, fAttribute SQLINTEGER, rgbValue *SQLPOINTER, cbValueMax SQLINTEGER, pcbValue []SQLINTEGER) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cfAttribute, cfAttributeAllocMap := (C.SQLINTEGER)(fAttribute), cgoAllocsUnknown
	crgbValue, crgbValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbValue)), cgoAllocsUnknown
	ccbValueMax, ccbValueMaxAllocMap := (C.SQLINTEGER)(cbValueMax), cgoAllocsUnknown
	cpcbValue, cpcbValueAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&pcbValue)))
	__ret := C.SQLGetStmtAttrA(chstmt, cfAttribute, crgbValue, ccbValueMax, cpcbValue)
	runtime.KeepAlive(cpcbValueAllocMap)
	runtime.KeepAlive(ccbValueMaxAllocMap)
	runtime.KeepAlive(crgbValueAllocMap)
	runtime.KeepAlive(cfAttributeAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetTypeInfoA function as declared in include/sqlucode.h:496
func SQLGetTypeInfoA(statementHandle *SQLHSTMT, dataTyoe SQLSMALLINT) SQLRETURN {
	cstatementHandle, cstatementHandleAllocMap := (C.SQLHSTMT)(unsafe.Pointer(statementHandle)), cgoAllocsUnknown
	cdataTyoe, cdataTyoeAllocMap := (C.SQLSMALLINT)(dataTyoe), cgoAllocsUnknown
	__ret := C.SQLGetTypeInfoA(cstatementHandle, cdataTyoe)
	runtime.KeepAlive(cdataTyoeAllocMap)
	runtime.KeepAlive(cstatementHandleAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLPrepareA function as declared in include/sqlucode.h:500
func SQLPrepareA(hstmt *SQLHSTMT, szSqlStr *SQLCHAR, cbSqlStr SQLINTEGER) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszSqlStr, cszSqlStrAllocMap := (*C.SQLCHAR)(unsafe.Pointer(szSqlStr)), cgoAllocsUnknown
	ccbSqlStr, ccbSqlStrAllocMap := (C.SQLINTEGER)(cbSqlStr), cgoAllocsUnknown
	__ret := C.SQLPrepareA(chstmt, cszSqlStr, ccbSqlStr)
	runtime.KeepAlive(ccbSqlStrAllocMap)
	runtime.KeepAlive(cszSqlStrAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetConnectAttrA function as declared in include/sqlucode.h:505
func SQLSetConnectAttrA(hdbc *SQLHDBC, fAttribute SQLINTEGER, rgbValue *SQLPOINTER, cbValue SQLINTEGER) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cfAttribute, cfAttributeAllocMap := (C.SQLINTEGER)(fAttribute), cgoAllocsUnknown
	crgbValue, crgbValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbValue)), cgoAllocsUnknown
	ccbValue, ccbValueAllocMap := (C.SQLINTEGER)(cbValue), cgoAllocsUnknown
	__ret := C.SQLSetConnectAttrA(chdbc, cfAttribute, crgbValue, ccbValue)
	runtime.KeepAlive(ccbValueAllocMap)
	runtime.KeepAlive(crgbValueAllocMap)
	runtime.KeepAlive(cfAttributeAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetCursorNameA function as declared in include/sqlucode.h:511
func SQLSetCursorNameA(hstmt *SQLHSTMT, szCursor []SQLCHAR, cbCursor SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCursor, cszCursorAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCursor)))
	ccbCursor, ccbCursorAllocMap := (C.SQLSMALLINT)(cbCursor), cgoAllocsUnknown
	__ret := C.SQLSetCursorNameA(chstmt, cszCursor, ccbCursor)
	runtime.KeepAlive(ccbCursorAllocMap)
	runtime.KeepAlive(cszCursorAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColumnsA function as declared in include/sqlucode.h:522
func SQLColumnsA(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLCHAR, cbTableName SQLSMALLINT, szColumnName []SQLCHAR, cbColumnName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	cszColumnName, cszColumnNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szColumnName)))
	ccbColumnName, ccbColumnNameAllocMap := (C.SQLSMALLINT)(cbColumnName), cgoAllocsUnknown
	__ret := C.SQLColumnsA(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName, cszColumnName, ccbColumnName)
	runtime.KeepAlive(ccbColumnNameAllocMap)
	runtime.KeepAlive(cszColumnNameAllocMap)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetConnectOptionA function as declared in include/sqlucode.h:533
func SQLGetConnectOptionA(hdbc *SQLHDBC, fOption SQLUSMALLINT, pvParam *SQLPOINTER) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cfOption, cfOptionAllocMap := (C.SQLUSMALLINT)(fOption), cgoAllocsUnknown
	cpvParam, cpvParamAllocMap := (C.SQLPOINTER)(unsafe.Pointer(pvParam)), cgoAllocsUnknown
	__ret := C.SQLGetConnectOptionA(chdbc, cfOption, cpvParam)
	runtime.KeepAlive(cpvParamAllocMap)
	runtime.KeepAlive(cfOptionAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLGetInfoA function as declared in include/sqlucode.h:540
func SQLGetInfoA(hdbc *SQLHDBC, fInfoType SQLUSMALLINT, rgbInfoValue *SQLPOINTER, cbInfoValueMax SQLSMALLINT, pcbInfoValue []SQLSMALLINT) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cfInfoType, cfInfoTypeAllocMap := (C.SQLUSMALLINT)(fInfoType), cgoAllocsUnknown
	crgbInfoValue, crgbInfoValueAllocMap := (C.SQLPOINTER)(unsafe.Pointer(rgbInfoValue)), cgoAllocsUnknown
	ccbInfoValueMax, ccbInfoValueMaxAllocMap := (C.SQLSMALLINT)(cbInfoValueMax), cgoAllocsUnknown
	cpcbInfoValue, cpcbInfoValueAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbInfoValue)))
	__ret := C.SQLGetInfoA(chdbc, cfInfoType, crgbInfoValue, ccbInfoValueMax, cpcbInfoValue)
	runtime.KeepAlive(cpcbInfoValueAllocMap)
	runtime.KeepAlive(ccbInfoValueMaxAllocMap)
	runtime.KeepAlive(crgbInfoValueAllocMap)
	runtime.KeepAlive(cfInfoTypeAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetConnectOptionA function as declared in include/sqlucode.h:552
func SQLSetConnectOptionA(hdbc *SQLHDBC, fOption SQLUSMALLINT, vParam SQLULEN) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cfOption, cfOptionAllocMap := (C.SQLUSMALLINT)(fOption), cgoAllocsUnknown
	cvParam, cvParamAllocMap := (C.SQLULEN)(vParam), cgoAllocsUnknown
	__ret := C.SQLSetConnectOptionA(chdbc, cfOption, cvParam)
	runtime.KeepAlive(cvParamAllocMap)
	runtime.KeepAlive(cfOptionAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSetStmtOptionA function as declared in include/sqlucode.h:557
func SQLSetStmtOptionA(hstmt *SQLHSTMT, fOption SQLUSMALLINT, vParam SQLULEN) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cfOption, cfOptionAllocMap := (C.SQLUSMALLINT)(fOption), cgoAllocsUnknown
	cvParam, cvParamAllocMap := (C.SQLULEN)(vParam), cgoAllocsUnknown
	__ret := C.SQLSetStmtOptionA(chstmt, cfOption, cvParam)
	runtime.KeepAlive(cvParamAllocMap)
	runtime.KeepAlive(cfOptionAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLSpecialColumnsA function as declared in include/sqlucode.h:562
func SQLSpecialColumnsA(hstmt *SQLHSTMT, fColType SQLUSMALLINT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLCHAR, cbTableName SQLSMALLINT, fScope SQLUSMALLINT, fNullable SQLUSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cfColType, cfColTypeAllocMap := (C.SQLUSMALLINT)(fColType), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	cfScope, cfScopeAllocMap := (C.SQLUSMALLINT)(fScope), cgoAllocsUnknown
	cfNullable, cfNullableAllocMap := (C.SQLUSMALLINT)(fNullable), cgoAllocsUnknown
	__ret := C.SQLSpecialColumnsA(chstmt, cfColType, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName, cfScope, cfNullable)
	runtime.KeepAlive(cfNullableAllocMap)
	runtime.KeepAlive(cfScopeAllocMap)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(cfColTypeAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLStatisticsA function as declared in include/sqlucode.h:574
func SQLStatisticsA(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLCHAR, cbTableName SQLSMALLINT, fUnique SQLUSMALLINT, fAccuracy SQLUSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	cfUnique, cfUniqueAllocMap := (C.SQLUSMALLINT)(fUnique), cgoAllocsUnknown
	cfAccuracy, cfAccuracyAllocMap := (C.SQLUSMALLINT)(fAccuracy), cgoAllocsUnknown
	__ret := C.SQLStatisticsA(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName, cfUnique, cfAccuracy)
	runtime.KeepAlive(cfAccuracyAllocMap)
	runtime.KeepAlive(cfUniqueAllocMap)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLTablesA function as declared in include/sqlucode.h:586
func SQLTablesA(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLCHAR, cbTableName SQLSMALLINT, szTableType []SQLCHAR, cbTableType SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	cszTableType, cszTableTypeAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableType)))
	ccbTableType, ccbTableTypeAllocMap := (C.SQLSMALLINT)(cbTableType), cgoAllocsUnknown
	__ret := C.SQLTablesA(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName, cszTableType, ccbTableType)
	runtime.KeepAlive(ccbTableTypeAllocMap)
	runtime.KeepAlive(cszTableTypeAllocMap)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDataSourcesA function as declared in include/sqlucode.h:601
func SQLDataSourcesA(henv *SQLHENV, fDirection SQLUSMALLINT, szDSN []SQLCHAR, cbDSNMax SQLSMALLINT, pcbDSN []SQLSMALLINT, szDescription []SQLCHAR, cbDescriptionMax SQLSMALLINT, pcbDescription []SQLSMALLINT) SQLRETURN {
	chenv, chenvAllocMap := (C.SQLHENV)(unsafe.Pointer(henv)), cgoAllocsUnknown
	cfDirection, cfDirectionAllocMap := (C.SQLUSMALLINT)(fDirection), cgoAllocsUnknown
	cszDSN, cszDSNAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szDSN)))
	ccbDSNMax, ccbDSNMaxAllocMap := (C.SQLSMALLINT)(cbDSNMax), cgoAllocsUnknown
	cpcbDSN, cpcbDSNAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDSN)))
	cszDescription, cszDescriptionAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szDescription)))
	ccbDescriptionMax, ccbDescriptionMaxAllocMap := (C.SQLSMALLINT)(cbDescriptionMax), cgoAllocsUnknown
	cpcbDescription, cpcbDescriptionAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDescription)))
	__ret := C.SQLDataSourcesA(chenv, cfDirection, cszDSN, ccbDSNMax, cpcbDSN, cszDescription, ccbDescriptionMax, cpcbDescription)
	runtime.KeepAlive(cpcbDescriptionAllocMap)
	runtime.KeepAlive(ccbDescriptionMaxAllocMap)
	runtime.KeepAlive(cszDescriptionAllocMap)
	runtime.KeepAlive(cpcbDSNAllocMap)
	runtime.KeepAlive(ccbDSNMaxAllocMap)
	runtime.KeepAlive(cszDSNAllocMap)
	runtime.KeepAlive(cfDirectionAllocMap)
	runtime.KeepAlive(chenvAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDriverConnectA function as declared in include/sqlucode.h:614
func SQLDriverConnectA(hdbc *SQLHDBC, hwnd *SQLHWND, szConnStrIn *SQLCHAR, cbConnStrIn SQLSMALLINT, szConnStrOut *SQLCHAR, cbConnStrOutMax SQLSMALLINT, pcbConnStrOut *SQLSMALLINT, fDriverCompletion SQLUSMALLINT) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	chwnd, chwndAllocMap := (C.SQLHWND)(unsafe.Pointer(hwnd)), cgoAllocsUnknown
	cszConnStrIn, cszConnStrInAllocMap := (*C.SQLCHAR)(unsafe.Pointer(szConnStrIn)), cgoAllocsUnknown
	ccbConnStrIn, ccbConnStrInAllocMap := (C.SQLSMALLINT)(cbConnStrIn), cgoAllocsUnknown
	cszConnStrOut, cszConnStrOutAllocMap := (*C.SQLCHAR)(unsafe.Pointer(szConnStrOut)), cgoAllocsUnknown
	ccbConnStrOutMax, ccbConnStrOutMaxAllocMap := (C.SQLSMALLINT)(cbConnStrOutMax), cgoAllocsUnknown
	cpcbConnStrOut, cpcbConnStrOutAllocMap := (*C.SQLSMALLINT)(unsafe.Pointer(pcbConnStrOut)), cgoAllocsUnknown
	cfDriverCompletion, cfDriverCompletionAllocMap := (C.SQLUSMALLINT)(fDriverCompletion), cgoAllocsUnknown
	__ret := C.SQLDriverConnectA(chdbc, chwnd, cszConnStrIn, ccbConnStrIn, cszConnStrOut, ccbConnStrOutMax, cpcbConnStrOut, cfDriverCompletion)
	runtime.KeepAlive(cfDriverCompletionAllocMap)
	runtime.KeepAlive(cpcbConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrOutMaxAllocMap)
	runtime.KeepAlive(cszConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrInAllocMap)
	runtime.KeepAlive(cszConnStrInAllocMap)
	runtime.KeepAlive(chwndAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLBrowseConnectA function as declared in include/sqlucode.h:625
func SQLBrowseConnectA(hdbc *SQLHDBC, szConnStrIn []SQLCHAR, cbConnStrIn SQLSMALLINT, szConnStrOut []SQLCHAR, cbConnStrOutMax SQLSMALLINT, pcbConnStrOut []SQLSMALLINT) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cszConnStrIn, cszConnStrInAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szConnStrIn)))
	ccbConnStrIn, ccbConnStrInAllocMap := (C.SQLSMALLINT)(cbConnStrIn), cgoAllocsUnknown
	cszConnStrOut, cszConnStrOutAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szConnStrOut)))
	ccbConnStrOutMax, ccbConnStrOutMaxAllocMap := (C.SQLSMALLINT)(cbConnStrOutMax), cgoAllocsUnknown
	cpcbConnStrOut, cpcbConnStrOutAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbConnStrOut)))
	__ret := C.SQLBrowseConnectA(chdbc, cszConnStrIn, ccbConnStrIn, cszConnStrOut, ccbConnStrOutMax, cpcbConnStrOut)
	runtime.KeepAlive(cpcbConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrOutMaxAllocMap)
	runtime.KeepAlive(cszConnStrOutAllocMap)
	runtime.KeepAlive(ccbConnStrInAllocMap)
	runtime.KeepAlive(cszConnStrInAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLColumnPrivilegesA function as declared in include/sqlucode.h:633
func SQLColumnPrivilegesA(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLCHAR, cbTableName SQLSMALLINT, szColumnName []SQLCHAR, cbColumnName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	cszColumnName, cszColumnNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szColumnName)))
	ccbColumnName, ccbColumnNameAllocMap := (C.SQLSMALLINT)(cbColumnName), cgoAllocsUnknown
	__ret := C.SQLColumnPrivilegesA(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName, cszColumnName, ccbColumnName)
	runtime.KeepAlive(ccbColumnNameAllocMap)
	runtime.KeepAlive(cszColumnNameAllocMap)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLForeignKeysA function as declared in include/sqlucode.h:653
func SQLForeignKeysA(hstmt *SQLHSTMT, szPkCatalogName []SQLCHAR, cbPkCatalogName SQLSMALLINT, szPkSchemaName []SQLCHAR, cbPkSchemaName SQLSMALLINT, szPkTableName []SQLCHAR, cbPkTableName SQLSMALLINT, szFkCatalogName []SQLCHAR, cbFkCatalogName SQLSMALLINT, szFkSchemaName []SQLCHAR, cbFkSchemaName SQLSMALLINT, szFkTableName []SQLCHAR, cbFkTableName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszPkCatalogName, cszPkCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szPkCatalogName)))
	ccbPkCatalogName, ccbPkCatalogNameAllocMap := (C.SQLSMALLINT)(cbPkCatalogName), cgoAllocsUnknown
	cszPkSchemaName, cszPkSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szPkSchemaName)))
	ccbPkSchemaName, ccbPkSchemaNameAllocMap := (C.SQLSMALLINT)(cbPkSchemaName), cgoAllocsUnknown
	cszPkTableName, cszPkTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szPkTableName)))
	ccbPkTableName, ccbPkTableNameAllocMap := (C.SQLSMALLINT)(cbPkTableName), cgoAllocsUnknown
	cszFkCatalogName, cszFkCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szFkCatalogName)))
	ccbFkCatalogName, ccbFkCatalogNameAllocMap := (C.SQLSMALLINT)(cbFkCatalogName), cgoAllocsUnknown
	cszFkSchemaName, cszFkSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szFkSchemaName)))
	ccbFkSchemaName, ccbFkSchemaNameAllocMap := (C.SQLSMALLINT)(cbFkSchemaName), cgoAllocsUnknown
	cszFkTableName, cszFkTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szFkTableName)))
	ccbFkTableName, ccbFkTableNameAllocMap := (C.SQLSMALLINT)(cbFkTableName), cgoAllocsUnknown
	__ret := C.SQLForeignKeysA(chstmt, cszPkCatalogName, ccbPkCatalogName, cszPkSchemaName, ccbPkSchemaName, cszPkTableName, ccbPkTableName, cszFkCatalogName, ccbFkCatalogName, cszFkSchemaName, ccbFkSchemaName, cszFkTableName, ccbFkTableName)
	runtime.KeepAlive(ccbFkTableNameAllocMap)
	runtime.KeepAlive(cszFkTableNameAllocMap)
	runtime.KeepAlive(ccbFkSchemaNameAllocMap)
	runtime.KeepAlive(cszFkSchemaNameAllocMap)
	runtime.KeepAlive(ccbFkCatalogNameAllocMap)
	runtime.KeepAlive(cszFkCatalogNameAllocMap)
	runtime.KeepAlive(ccbPkTableNameAllocMap)
	runtime.KeepAlive(cszPkTableNameAllocMap)
	runtime.KeepAlive(ccbPkSchemaNameAllocMap)
	runtime.KeepAlive(cszPkSchemaNameAllocMap)
	runtime.KeepAlive(ccbPkCatalogNameAllocMap)
	runtime.KeepAlive(cszPkCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLNativeSqlA function as declared in include/sqlucode.h:669
func SQLNativeSqlA(hdbc *SQLHDBC, szSqlStrIn []SQLCHAR, cbSqlStrIn SQLINTEGER, szSqlStr []SQLCHAR, cbSqlStrMax SQLINTEGER, pcbSqlStr []SQLINTEGER) SQLRETURN {
	chdbc, chdbcAllocMap := (C.SQLHDBC)(unsafe.Pointer(hdbc)), cgoAllocsUnknown
	cszSqlStrIn, cszSqlStrInAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSqlStrIn)))
	ccbSqlStrIn, ccbSqlStrInAllocMap := (C.SQLINTEGER)(cbSqlStrIn), cgoAllocsUnknown
	cszSqlStr, cszSqlStrAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSqlStr)))
	ccbSqlStrMax, ccbSqlStrMaxAllocMap := (C.SQLINTEGER)(cbSqlStrMax), cgoAllocsUnknown
	cpcbSqlStr, cpcbSqlStrAllocMap := copyPSQLINTEGERBytes((*sliceHeader)(unsafe.Pointer(&pcbSqlStr)))
	__ret := C.SQLNativeSqlA(chdbc, cszSqlStrIn, ccbSqlStrIn, cszSqlStr, ccbSqlStrMax, cpcbSqlStr)
	runtime.KeepAlive(cpcbSqlStrAllocMap)
	runtime.KeepAlive(ccbSqlStrMaxAllocMap)
	runtime.KeepAlive(cszSqlStrAllocMap)
	runtime.KeepAlive(ccbSqlStrInAllocMap)
	runtime.KeepAlive(cszSqlStrInAllocMap)
	runtime.KeepAlive(chdbcAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLPrimaryKeysA function as declared in include/sqlucode.h:678
func SQLPrimaryKeysA(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLCHAR, cbTableName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	__ret := C.SQLPrimaryKeysA(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLProcedureColumnsA function as declared in include/sqlucode.h:687
func SQLProcedureColumnsA(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szProcName []SQLCHAR, cbProcName SQLSMALLINT, szColumnName []SQLCHAR, cbColumnName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszProcName, cszProcNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szProcName)))
	ccbProcName, ccbProcNameAllocMap := (C.SQLSMALLINT)(cbProcName), cgoAllocsUnknown
	cszColumnName, cszColumnNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szColumnName)))
	ccbColumnName, ccbColumnNameAllocMap := (C.SQLSMALLINT)(cbColumnName), cgoAllocsUnknown
	__ret := C.SQLProcedureColumnsA(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszProcName, ccbProcName, cszColumnName, ccbColumnName)
	runtime.KeepAlive(ccbColumnNameAllocMap)
	runtime.KeepAlive(cszColumnNameAllocMap)
	runtime.KeepAlive(ccbProcNameAllocMap)
	runtime.KeepAlive(cszProcNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLProceduresA function as declared in include/sqlucode.h:698
func SQLProceduresA(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szProcName []SQLCHAR, cbProcName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszProcName, cszProcNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szProcName)))
	ccbProcName, ccbProcNameAllocMap := (C.SQLSMALLINT)(cbProcName), cgoAllocsUnknown
	__ret := C.SQLProceduresA(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszProcName, ccbProcName)
	runtime.KeepAlive(ccbProcNameAllocMap)
	runtime.KeepAlive(cszProcNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLTablePrivilegesA function as declared in include/sqlucode.h:708
func SQLTablePrivilegesA(hstmt *SQLHSTMT, szCatalogName []SQLCHAR, cbCatalogName SQLSMALLINT, szSchemaName []SQLCHAR, cbSchemaName SQLSMALLINT, szTableName []SQLCHAR, cbTableName SQLSMALLINT) SQLRETURN {
	chstmt, chstmtAllocMap := (C.SQLHSTMT)(unsafe.Pointer(hstmt)), cgoAllocsUnknown
	cszCatalogName, cszCatalogNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szCatalogName)))
	ccbCatalogName, ccbCatalogNameAllocMap := (C.SQLSMALLINT)(cbCatalogName), cgoAllocsUnknown
	cszSchemaName, cszSchemaNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szSchemaName)))
	ccbSchemaName, ccbSchemaNameAllocMap := (C.SQLSMALLINT)(cbSchemaName), cgoAllocsUnknown
	cszTableName, cszTableNameAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szTableName)))
	ccbTableName, ccbTableNameAllocMap := (C.SQLSMALLINT)(cbTableName), cgoAllocsUnknown
	__ret := C.SQLTablePrivilegesA(chstmt, cszCatalogName, ccbCatalogName, cszSchemaName, ccbSchemaName, cszTableName, ccbTableName)
	runtime.KeepAlive(ccbTableNameAllocMap)
	runtime.KeepAlive(cszTableNameAllocMap)
	runtime.KeepAlive(ccbSchemaNameAllocMap)
	runtime.KeepAlive(cszSchemaNameAllocMap)
	runtime.KeepAlive(ccbCatalogNameAllocMap)
	runtime.KeepAlive(cszCatalogNameAllocMap)
	runtime.KeepAlive(chstmtAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}

// SQLDriversA function as declared in include/sqlucode.h:717
func SQLDriversA(henv *SQLHENV, fDirection SQLUSMALLINT, szDriverDesc []SQLCHAR, cbDriverDescMax SQLSMALLINT, pcbDriverDesc []SQLSMALLINT, szDriverAttributes []SQLCHAR, cbDrvrAttrMax SQLSMALLINT, pcbDrvrAttr []SQLSMALLINT) SQLRETURN {
	chenv, chenvAllocMap := (C.SQLHENV)(unsafe.Pointer(henv)), cgoAllocsUnknown
	cfDirection, cfDirectionAllocMap := (C.SQLUSMALLINT)(fDirection), cgoAllocsUnknown
	cszDriverDesc, cszDriverDescAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szDriverDesc)))
	ccbDriverDescMax, ccbDriverDescMaxAllocMap := (C.SQLSMALLINT)(cbDriverDescMax), cgoAllocsUnknown
	cpcbDriverDesc, cpcbDriverDescAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDriverDesc)))
	cszDriverAttributes, cszDriverAttributesAllocMap := copyPSQLCHARBytes((*sliceHeader)(unsafe.Pointer(&szDriverAttributes)))
	ccbDrvrAttrMax, ccbDrvrAttrMaxAllocMap := (C.SQLSMALLINT)(cbDrvrAttrMax), cgoAllocsUnknown
	cpcbDrvrAttr, cpcbDrvrAttrAllocMap := copyPSQLSMALLINTBytes((*sliceHeader)(unsafe.Pointer(&pcbDrvrAttr)))
	__ret := C.SQLDriversA(chenv, cfDirection, cszDriverDesc, ccbDriverDescMax, cpcbDriverDesc, cszDriverAttributes, ccbDrvrAttrMax, cpcbDrvrAttr)
	runtime.KeepAlive(cpcbDrvrAttrAllocMap)
	runtime.KeepAlive(ccbDrvrAttrMaxAllocMap)
	runtime.KeepAlive(cszDriverAttributesAllocMap)
	runtime.KeepAlive(cpcbDriverDescAllocMap)
	runtime.KeepAlive(ccbDriverDescMaxAllocMap)
	runtime.KeepAlive(cszDriverDescAllocMap)
	runtime.KeepAlive(cfDirectionAllocMap)
	runtime.KeepAlive(chenvAllocMap)
	__v := (SQLRETURN)(__ret)
	return __v
}
