// Code generated by MockGen. DO NOT EDIT.
// Source: recordset.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	odbc "github.com/ninthclowd/unixodbc/internal/odbc"
)

// MockRecordSet is a mock of RecordSet interface.
type MockRecordSet struct {
	ctrl     *gomock.Controller
	recorder *MockRecordSetMockRecorder
}

// MockRecordSetMockRecorder is the mock recorder for MockRecordSet.
type MockRecordSetMockRecorder struct {
	mock *MockRecordSet
}

// NewMockRecordSet creates a new mock instance.
func NewMockRecordSet(ctrl *gomock.Controller) *MockRecordSet {
	mock := &MockRecordSet{ctrl: ctrl}
	mock.recorder = &MockRecordSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecordSet) EXPECT() *MockRecordSetMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRecordSet) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRecordSetMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRecordSet)(nil).Close))
}

// Column mocks base method.
func (m *MockRecordSet) Column(index int) odbc.Column {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Column", index)
	ret0, _ := ret[0].(odbc.Column)
	return ret0
}

// Column indicates an expected call of Column.
func (mr *MockRecordSetMockRecorder) Column(index interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Column", reflect.TypeOf((*MockRecordSet)(nil).Column), index)
}

// ColumnNames mocks base method.
func (m *MockRecordSet) ColumnNames() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnNames")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ColumnNames indicates an expected call of ColumnNames.
func (mr *MockRecordSetMockRecorder) ColumnNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnNames", reflect.TypeOf((*MockRecordSet)(nil).ColumnNames))
}

// ColumnWithName mocks base method.
func (m *MockRecordSet) ColumnWithName(name string) odbc.Column {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnWithName", name)
	ret0, _ := ret[0].(odbc.Column)
	return ret0
}

// ColumnWithName indicates an expected call of ColumnWithName.
func (mr *MockRecordSetMockRecorder) ColumnWithName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnWithName", reflect.TypeOf((*MockRecordSet)(nil).ColumnWithName), name)
}

// Fetch mocks base method.
func (m *MockRecordSet) Fetch() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockRecordSetMockRecorder) Fetch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockRecordSet)(nil).Fetch))
}

// Statement mocks base method.
func (m *MockRecordSet) Statement() odbc.Statement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statement")
	ret0, _ := ret[0].(odbc.Statement)
	return ret0
}

// Statement indicates an expected call of Statement.
func (mr *MockRecordSetMockRecorder) Statement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statement", reflect.TypeOf((*MockRecordSet)(nil).Statement))
}

// Unmarshal mocks base method.
func (m *MockRecordSet) Unmarshal(out interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", out)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockRecordSetMockRecorder) Unmarshal(out interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockRecordSet)(nil).Unmarshal), out)
}
