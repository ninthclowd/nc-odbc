// Code generated by MockGen. DO NOT EDIT.
// Source: column.go

// Package mocks is a generated GoMock package.
package mocks

import (
	driver "database/sql/driver"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockColumn is a mock of Column interface.
type MockColumn struct {
	ctrl     *gomock.Controller
	recorder *MockColumnMockRecorder
}

// MockColumnMockRecorder is the mock recorder for MockColumn.
type MockColumnMockRecorder struct {
	mock *MockColumn
}

// NewMockColumn creates a new mock instance.
func NewMockColumn(ctrl *gomock.Controller) *MockColumn {
	mock := &MockColumn{ctrl: ctrl}
	mock.recorder = &MockColumnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColumn) EXPECT() *MockColumnMockRecorder {
	return m.recorder
}

// Decimal mocks base method.
func (m *MockColumn) Decimal() (int64, int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decimal")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// Decimal indicates an expected call of Decimal.
func (mr *MockColumnMockRecorder) Decimal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decimal", reflect.TypeOf((*MockColumn)(nil).Decimal))
}

// Name mocks base method.
func (m *MockColumn) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockColumnMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockColumn)(nil).Name))
}

// Nullable mocks base method.
func (m *MockColumn) Nullable() (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nullable")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Nullable indicates an expected call of Nullable.
func (mr *MockColumnMockRecorder) Nullable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nullable", reflect.TypeOf((*MockColumn)(nil).Nullable))
}

// ScanType mocks base method.
func (m *MockColumn) ScanType() reflect.Type {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanType")
	ret0, _ := ret[0].(reflect.Type)
	return ret0
}

// ScanType indicates an expected call of ScanType.
func (mr *MockColumnMockRecorder) ScanType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanType", reflect.TypeOf((*MockColumn)(nil).ScanType))
}

// Value mocks base method.
func (m *MockColumn) Value() (driver.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Value")
	ret0, _ := ret[0].(driver.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Value indicates an expected call of Value.
func (mr *MockColumnMockRecorder) Value() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Value", reflect.TypeOf((*MockColumn)(nil).Value))
}

// VariableLength mocks base method.
func (m *MockColumn) VariableLength() (int64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VariableLength")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// VariableLength indicates an expected call of VariableLength.
func (mr *MockColumnMockRecorder) VariableLength() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VariableLength", reflect.TypeOf((*MockColumn)(nil).VariableLength))
}
