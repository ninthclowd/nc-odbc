// Code generated by MockGen. DO NOT EDIT.
// Source: statement.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	odbc "github.com/ninthclowd/unixodbc/internal/odbc"
)

// MockStatement is a mock of Statement interface.
type MockStatement struct {
	ctrl     *gomock.Controller
	recorder *MockStatementMockRecorder
}

// MockStatementMockRecorder is the mock recorder for MockStatement.
type MockStatementMockRecorder struct {
	mock *MockStatement
}

// NewMockStatement creates a new mock instance.
func NewMockStatement(ctrl *gomock.Controller) *MockStatement {
	mock := &MockStatement{ctrl: ctrl}
	mock.recorder = &MockStatementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatement) EXPECT() *MockStatementMockRecorder {
	return m.recorder
}

// BindParams mocks base method.
func (m *MockStatement) BindParams(params ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BindParams", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BindParams indicates an expected call of BindParams.
func (mr *MockStatementMockRecorder) BindParams(params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BindParams", reflect.TypeOf((*MockStatement)(nil).BindParams), params...)
}

// Close mocks base method.
func (m *MockStatement) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStatementMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStatement)(nil).Close))
}

// ExecDirect mocks base method.
func (m *MockStatement) ExecDirect(ctx context.Context, sql string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecDirect", ctx, sql)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecDirect indicates an expected call of ExecDirect.
func (mr *MockStatementMockRecorder) ExecDirect(ctx, sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecDirect", reflect.TypeOf((*MockStatement)(nil).ExecDirect), ctx, sql)
}

// Execute mocks base method.
func (m *MockStatement) Execute(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockStatementMockRecorder) Execute(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockStatement)(nil).Execute), ctx)
}

// NumParams mocks base method.
func (m *MockStatement) NumParams() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NumParams")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumParams indicates an expected call of NumParams.
func (mr *MockStatementMockRecorder) NumParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumParams", reflect.TypeOf((*MockStatement)(nil).NumParams))
}

// Prepare mocks base method.
func (m *MockStatement) Prepare(ctx context.Context, sql string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", ctx, sql)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare.
func (mr *MockStatementMockRecorder) Prepare(ctx, sql interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockStatement)(nil).Prepare), ctx, sql)
}

// RecordSet mocks base method.
func (m *MockStatement) RecordSet() (odbc.RecordSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordSet")
	ret0, _ := ret[0].(odbc.RecordSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordSet indicates an expected call of RecordSet.
func (mr *MockStatementMockRecorder) RecordSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordSet", reflect.TypeOf((*MockStatement)(nil).RecordSet))
}

// ResetParams mocks base method.
func (m *MockStatement) ResetParams() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetParams")
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetParams indicates an expected call of ResetParams.
func (mr *MockStatementMockRecorder) ResetParams() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetParams", reflect.TypeOf((*MockStatement)(nil).ResetParams))
}

// SetConcurrency mocks base method.
func (m *MockStatement) SetConcurrency(concurrency odbc.Concurrency) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetConcurrency", concurrency)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetConcurrency indicates an expected call of SetConcurrency.
func (mr *MockStatementMockRecorder) SetConcurrency(concurrency interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConcurrency", reflect.TypeOf((*MockStatement)(nil).SetConcurrency), concurrency)
}

// SetCursorSensitivity mocks base method.
func (m *MockStatement) SetCursorSensitivity(sensitivity odbc.CursorSensitivity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCursorSensitivity", sensitivity)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCursorSensitivity indicates an expected call of SetCursorSensitivity.
func (mr *MockStatementMockRecorder) SetCursorSensitivity(sensitivity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCursorSensitivity", reflect.TypeOf((*MockStatement)(nil).SetCursorSensitivity), sensitivity)
}
