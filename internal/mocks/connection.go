// Code generated by MockGen. DO NOT EDIT.
// Source: connection.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	odbc "github.com/ninthclowd/unixodbc/internal/odbc"
)

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// Commit mocks base method.
func (m *MockConnection) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockConnectionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockConnection)(nil).Commit))
}

// Ping mocks base method.
func (m *MockConnection) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockConnectionMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockConnection)(nil).Ping))
}

// Rollback mocks base method.
func (m *MockConnection) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockConnectionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockConnection)(nil).Rollback))
}

// SetAutoCommit mocks base method.
func (m *MockConnection) SetAutoCommit(autoCommit bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAutoCommit", autoCommit)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAutoCommit indicates an expected call of SetAutoCommit.
func (mr *MockConnectionMockRecorder) SetAutoCommit(autoCommit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAutoCommit", reflect.TypeOf((*MockConnection)(nil).SetAutoCommit), autoCommit)
}

// SetIsolationLevel mocks base method.
func (m *MockConnection) SetIsolationLevel(level odbc.IsolationLevel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIsolationLevel", level)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIsolationLevel indicates an expected call of SetIsolationLevel.
func (mr *MockConnectionMockRecorder) SetIsolationLevel(level interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsolationLevel", reflect.TypeOf((*MockConnection)(nil).SetIsolationLevel), level)
}

// SetReadOnlyMode mocks base method.
func (m *MockConnection) SetReadOnlyMode(readOnly odbc.ReadOnlyMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadOnlyMode", readOnly)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadOnlyMode indicates an expected call of SetReadOnlyMode.
func (mr *MockConnectionMockRecorder) SetReadOnlyMode(readOnly interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadOnlyMode", reflect.TypeOf((*MockConnection)(nil).SetReadOnlyMode), readOnly)
}

// Statement mocks base method.
func (m *MockConnection) Statement() (odbc.Statement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statement")
	ret0, _ := ret[0].(odbc.Statement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statement indicates an expected call of Statement.
func (mr *MockConnectionMockRecorder) Statement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statement", reflect.TypeOf((*MockConnection)(nil).Statement))
}
