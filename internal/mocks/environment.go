// Code generated by MockGen. DO NOT EDIT.
// Source: environment.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	odbc "github.com/ninthclowd/unixodbc/internal/odbc"
)

// MockEnvironment is a mock of Environment interface.
type MockEnvironment struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentMockRecorder
}

// MockEnvironmentMockRecorder is the mock recorder for MockEnvironment.
type MockEnvironmentMockRecorder struct {
	mock *MockEnvironment
}

// NewMockEnvironment creates a new mock instance.
func NewMockEnvironment(ctrl *gomock.Controller) *MockEnvironment {
	mock := &MockEnvironment{ctrl: ctrl}
	mock.recorder = &MockEnvironmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironment) EXPECT() *MockEnvironmentMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockEnvironment) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockEnvironmentMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockEnvironment)(nil).Close))
}

// Connect mocks base method.
func (m *MockEnvironment) Connect(ctx context.Context, connStr string) (odbc.Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, connStr)
	ret0, _ := ret[0].(odbc.Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockEnvironmentMockRecorder) Connect(ctx, connStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockEnvironment)(nil).Connect), ctx, connStr)
}

// SetPoolOption mocks base method.
func (m *MockEnvironment) SetPoolOption(option odbc.PoolOption) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPoolOption", option)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPoolOption indicates an expected call of SetPoolOption.
func (mr *MockEnvironmentMockRecorder) SetPoolOption(option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPoolOption", reflect.TypeOf((*MockEnvironment)(nil).SetPoolOption), option)
}

// SetVersion mocks base method.
func (m *MockEnvironment) SetVersion(version odbc.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVersion", version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVersion indicates an expected call of SetVersion.
func (mr *MockEnvironmentMockRecorder) SetVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVersion", reflect.TypeOf((*MockEnvironment)(nil).SetVersion), version)
}
